<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="ConfluenceMigratorPro.Code.CommonCode" locale="">
  <web>ConfluenceMigratorPro.Code</web>
  <name>CommonCode</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>CommonCode</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#set ($discard = $xwiki.ssx.use('ConfluenceMigratorPro.Code.CommonCode'))
#set ($discard = $xwiki.jsx.use('ConfluenceMigratorPro.Code.CommonCode'))
#**
 * Display a h2 in a nice way.
 *
 * @param $icon the name of the ican that will be displayed before the title
 * @param $key the translation key of the title
 * @param $class the additional classes that will be added to the title
 * @param $params the params that will be passed along with the translation key.
 *#
#macro (displaySubtitle $icon $key $class $params)
&lt;h2 class="cfmTitle $!class"&gt;
  &lt;div&gt;
    &lt;span class="cfmTitleIcon"&gt;
      $services.icon.renderHTML($icon)
    &lt;/span&gt;
    &lt;span&gt;
      $escapetool.xml($services.localization.render($key, $params))
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/h2&gt;
#end
#**
 * @param $ref an entity reference.
 * @return a string of the form space1 &gt; space2 &gt; ... &gt; spacen.
 *#
#macro (renderReferenceNicely $ref)
  #set ($tmp = '')
  #foreach ($space in $ref.spaceReferences)
    #if ($foreach.count == 1)
      #set ($tmp = $space.name)
    #else
      #set ($tmp = "$tmp &gt; $space.name")
    #end
  #end
  &lt;a href="$escapetool.xml($xwiki.getURL($ref))"&gt;$escapetool.xml("$tmp")&lt;/a&gt;
#end
#**
 * Display a livedata of the profile pages.
 *#
#macro (displayMigrationsLiveData)
{{liveData 
  id='confluenceMigrations'
  source='liveTable'
  sourceParameters="resultPage=ConfluenceMigratorPro.Code.LivedataJSON&amp;className=ConfluenceMigratorPro.Code.MigrationClass&amp;translationPrefix=confluencepro.migration.livetable."
  properties="doc.title,job_status,executed,doc.date,doc.author,actions"
  sort='doc.date:desc'}}{
  "meta": {
    "propertyDescriptors": [
      { "id": "job_status", "displayer": "html", "filterable": "false"},
      { "id": "actions", "displayer": "actions", "sortable": false, "filterable": false }
    ],
    "actions": [
      {
        "id": "interrupt",
        "name": "$services.localization.render('confluencepro.job.interrupt.button')",
        "urlProperty": "doc.url",
        "icon": "stop"
      },
      {"id": "rights", "allowProperty": false},
      {"id": "rename", "allowProperty": false},
      {"id": "copy", "allowProperty": false},
      {"id": "delete", "allowProperty": false},
      {"id": "edit", "allowProperty": false}
    ]
  }
}{{/liveData}}
#end
#**
 * users can specify a migration document from which to take default parameter
 * values. This macro handles the request parameters for this feature and updates
 * the prefilledValues object if needed.
 * Note: outputs XWiki syntax.
 *#
#macro(handlePrefilledValues)
  #set ($prefilledValues = $services.confluenceMigration.getMutablePrefilledConfiguration())
  #set ($savePrefillChoice = "$request.get('save-prefill-choices')")
  #set ($configSource = $request.get("config-source"))
  #set ($specifiedMigration = $request.get("specified-migration"))
  #if ($configSource == "")
    #set ($configSource = "default")
  #end
  #if ($savePrefillChoice == "true" || $savePrefillChoice == "on" || $savePrefillChoice == "1")
    #set ($prefillConfigDoc = $xwiki.getDocument("ConfluenceMigratorPro.Code.PrefillConfig"))
    #if ($prefillConfigDoc.isNew())
      #set ($savedConfigSource = "default")
      #set ($savedSpecifiedMigration = "")
    #else
      #set ($savedConfigSource = $prefillConfigDoc.getValue("configSource"))
      #set ($savedSpecifiedMigration = $prefillConfigDoc.getValue("specifiedMigration"))
    #end
    #if ($savedConfigSource != $configSource || $savedSpecifiedMigration != $specifiedMigration)
      #set ($prefillConfigObj = $prefillConfigDoc.getObject("ConfluenceMigratorPro.Code.PrefillConfigClass", true))
      #set ($discard = $prefillConfigObj.set("configSource", $configSource))
      #set ($discard = $prefillConfigObj.set("specifiedMigration", $specifiedMigration))
      #set ($discard = $prefillConfigDoc.save())
    #end
  #end
  #set ($fromMigrationDoc = $objecttool.null)
  #if ($configSource != "default")
    #if ($configSource == "last")
      #set ($lastMigRes = $services.query.xwql("select doc.fullName from Document doc, doc.object(ConfluenceMigratorPro.Code.MigrationClass) obj where doc.fullName not like 'ConfluenceMigratorPro.Code.%' order by doc.date desc").setLimit(1).execute())
      #if (!$lastMigRes.isEmpty())
        #set ($fromMigrationDoc = $xwiki.getDocument("$lastMigRes.get(0)"))
      #end
    #else
      #set ($fromMigrationDoc = $xwiki.getDocument($specifiedMigration))
    #end
    #if ($fromMigrationDoc != $objecttool.null &amp;&amp; !$fromMigrationDoc.isNew())
      #set ($discard = $prefilledValues['input'].putAll($jsontool.fromString($fromMigrationDoc.getValue('inputProperties'))))
      #set ($discard = $prefilledValues['output'].putAll($jsontool.fromString($fromMigrationDoc.getValue('outputProperties'))))

      Default parameter values were prefilled from [[$fromMigrationDoc]].
    #end
  #end
#end
/**
 * Display the migration parameter fields.
 * Requires calling handlePrefilledValues before.
 */
#macro(displayMigrationParameterFormFields)
  &lt;h2&gt;$escapetool.xml($services.localization.render('confluencepro.job.question.advanced.input'))&lt;/h2&gt;
  &lt;dl&gt;
    &lt;input type="hidden" id="cfm-input-properties" name="ConfluenceMigratorPro.Code.MigrationClass_0_inputProperties" value="$escapetool.xml($jsontool.serialize($prefilledValues['input']))" /&gt;
    #set ($descriptor = $services.filter.getInputFilterStreamDescriptor('confluence+xml'))
    #foreach ($propertyDescriptor in $descriptor.properties)
      #if ($propertyDescriptor.id != 'source' &amp;&amp; $propertyDescriptor.id != 'linkMapping')
        #displayFormField('input', $propertyDescriptor)
      #end
    #end
  &lt;/dl&gt;
  &lt;h2&gt;$escapetool.xml($services.localization.render('confluencepro.job.general.title'))&lt;/h2&gt;
  &lt;dl&gt;
    &lt;dt&gt;
      &lt;label for="skipQuestions"&gt;$escapetool.xml($services.localization.render('confluencepro.job.skipquestions.question.title'))&lt;/label&gt;
      &lt;span class="xHint"&gt;$escapetool.xml($services.localization.render('confluencepro.job.skipquestions.question.hint'))&lt;/span&gt;
    &lt;/dt&gt;
    &lt;dd&gt;
      &lt;input id="skipQuestions" type="text" class="cfm-output-filter-property" value="$prefilledValues['output'].getOrDefault('skipQuestions', 'false')" data-key="skipQuestions"/&gt;
    &lt;/dd&gt;
    &lt;dt&gt;
      &lt;label for="rightOnly"&gt;$escapetool.xml($services.localization.render('confluencepro.job.onlyrights.question.title'))&lt;/label&gt;
      &lt;span class="xHint"&gt;$escapetool.xml($services.localization.render('confluencepro.job.onlyrights.question.hint'))&lt;/span&gt;
    &lt;/dt&gt;
    &lt;dd&gt;
      &lt;input id="rightOnly" type="text" class="cfm-output-filter-property" value="$prefilledValues['output'].getOrDefault('rightOnly', 'false')" data-key="rightOnly"/&gt;
    &lt;/dd&gt;
  &lt;/dl&gt;
  &lt;h3&gt;$escapetool.xml($services.localization.render('confluencepro.job.linkmapping.title'))&lt;/h3&gt;
  &lt;dl&gt;
    &lt;dt&gt;
      &lt;label for="saveLinkMapping"&gt;$escapetool.xml($services.localization.render('confluencepro.job.savelinkmapping.question.title'))&lt;/label&gt;
      &lt;span class="xHint"&gt;$escapetool.xml($services.localization.render('confluencepro.job.savelinkmapping.question.hint'))&lt;/span&gt;
    &lt;/dt&gt;
    &lt;dd&gt;
      &lt;input id="saveLinkMapping" type="text" class="cfm-output-filter-property" value="$prefilledValues['output'].getOrDefault('saveLinkMapping', 'false')" data-key="saveLinkMapping"/&gt;
    &lt;/dd&gt;
    &lt;dt&gt;
      &lt;label for="onlyLinkMapping"&gt;$escapetool.xml($services.localization.render('confluencepro.job.onlylinkmapping.question.title'))&lt;/label&gt;
      &lt;span class="xHint"&gt;$escapetool.xml($services.localization.render('confluencepro.job.onlylinkmapping.question.hint'))&lt;/span&gt;
    &lt;/dt&gt;
    &lt;dd&gt;
      &lt;input id="onlyLinkMapping" type="text" class="cfm-output-filter-property" value="$prefilledValues['output'].getOrDefault('onlyLinkMapping', 'false')" data-key="onlyLinkMapping"/&gt;
    &lt;/dd&gt;
  &lt;/dl&gt;
  &lt;div style="display: none"&gt;
    ## See https://github.com/xwikisas/application-confluence-migrator-pro/issues/83
    &lt;div class="box warningmessage"&gt;
      &lt;p&gt;$escapetool.xml($services.localization.render('confluencepro.job.onlyrights.warning'))&lt;/p&gt;
    &lt;/div&gt;
    &lt;h2&gt;$escapetool.xml($services.localization.render('confluencepro.job.question.advanced.output'))&lt;/h2&gt;
    &lt;dl&gt;
      &lt;input type="hidden" id="cfm-output-properties" name="ConfluenceMigratorPro.Code.MigrationClass_0_outputProperties" value="$escapetool.xml($jsontool.serialize($prefilledValues['output']))" /&gt;
      #set ($descriptor = $services.filter.getOutputFilterStreamDescriptor('xwiki+instance'))
      #foreach ($propertyDescriptor in $descriptor.properties)
        #displayFormField('output', $propertyDescriptor)
      #end
    &lt;/dl&gt;
  &lt;/div&gt;
#end
#**
 * Display a form field given a descriptor. The method uses the outside param $prefilledValues.
 *
 * @param $type 'input' or 'output'.
 * @param propertyDescriptor the descriptor from which to extract data and display an input.
 *#
#macro (displayFormField $type $propertyDescriptor)
  #set ($propertyDescriptorId = $propertyDescriptor.id)
  #if ($type == 'input')
    #set ($propertyDescriptorInputId = "qproperty_inputProperties[]")
  #else
    #set ($propertyDescriptorInputId = "qproperty_outputProperties[]")
  #end
  #set ($propertyDescriptorLabel = $escapetool.xml($services.localization.render("confluencepro.job.question.advanced.${propertyDescriptorId}")))
  #if ("$!propertyDescriptorLabel" == "confluencepro.job.question.advanced.$propertyDescriptorId")
    #set ($propertyDescriptorLabel = $propertyDescriptor.name)
  #end
  #set ($propertyDescriptorAbout = $escapetool.xml($services.localization.render("confluencepro.job.question.advanced.${propertyDescriptorId}.description")))
  #if ("$!propertyDescriptorAbout" == "confluencepro.job.question.advanced.${propertyDescriptorId}.description")
    #set ($propertyDescriptorAbout = $propertyDescriptor.description)
  #end
  #set ($propertyDescriptorSupportedFormats = $escapetool.xml($services.localization.render("confluencepro.job.question.advanced.${propertyDescriptorId}.supportedformats")))
  &lt;dt&gt;
    &lt;label for="$!escapetool.xml($propertyDescriptorId)"&gt;$propertyDescriptorLabel&lt;/label&gt;
    #if ("$!propertyDescriptorAbout" != '')
      &lt;span class="xHint"&gt;$propertyDescriptorAbout&lt;/span&gt;
    #end
    #if ("$!propertyDescriptorSupportedFormats" != "confluencepro.job.question.advanced.${propertyDescriptorId}.supportedformats")
      &lt;span class="xHint"&gt;&lt;tt&gt;$propertyDescriptorSupportedFormats&lt;/tt&gt;&lt;/span&gt;
    #end
  &lt;/dt&gt;
  &lt;dd&gt;
    #if ("$!prefilledValues.get($type).get($propertyDescriptorId)" == '')
      #set ($propertyDescriptorInputValue = '')
      #if (($propertyDescriptor.defaultValue || "$!propertyDescriptor.defaultValue" != '') &amp;&amp;
        ($propertyDescriptor.type.getName() == 'boolean' || $propertyDescriptor.type.getName() == 'int' || $propertyDescriptor.type.getName() == 'java.lang.String'))
        #set ($propertyDescriptorInputValue = $propertyDescriptor.defaultValue)
      #end
      #if ($request.get($propertyDescriptorInputId))
        #set ($propertyDescriptorInputValue = $request.get($propertyDescriptorInputId))
      #end
    #else
      #set ($propertyDescriptorInputValue = $prefilledValues[$type].get($propertyDescriptorId))
    #end
    &lt;input type="text" class="cfm-${type}-filter-property"
      value="$!escapetool.xml($propertyDescriptorInputValue)"
      data-key="$!escapetool.xml($propertyDescriptorId)" /&gt;
  &lt;/dd&gt;
#end
#macro (getMigrations)
  #set ($migrations = $services.query.xwql("select doc.fullName, doc.name, doc.title from Document doc, doc.object(ConfluenceMigratorPro.Code.MigrationClass) obj where doc.fullName not like 'ConfluenceMigratorPro.Code.%' order by doc.fullName desc").execute())
#end
#macro (displaySelectMigrations $fieldName $allowEmpty)
  &lt;select name="$fieldName" id="$fieldName" autocomplete="off"&gt;
    #if ($allowEmpty)
      &lt;option value="" #if ($specifiedMigration == "") selected="selected"#end&gt;&lt;/option&gt;
    #end
    #foreach ($migration in $migrations)
      #set ($escapedMigrationName = $escapetool.xml($migration[0]))
      #set ($escapedMigrationTitle = $escapetool.xml($migration[2]))
      #if ($escapedMigrationTitle == "")
        #set ($escapedMigrationTitle = $escapetool.xml($migration[1]))
      #end
      &lt;option value="$escapedMigrationName" #if ($migration[0] == $specifiedMigration) selected="selected"#end&gt;$escapedMigrationTitle&lt;/option&gt;
    #end
  &lt;/select&gt;
#end
#**
 * Display form fields to choose a migration from which to prefill parameters.
 *#
#macro (displayPrefillForm)
  #getMigrations
  #if (!$migrations.isEmpty())
    #set ($prefillConfigDoc = $xwiki.getDocument("ConfluenceMigratorPro.Code.PrefillConfig"))
    #if ($prefillConfigDoc.isNew())
      #set ($configSource = "default")
      #set ($specifiedMigration = "")
    #else
      #set ($configSource = "$!prefillConfigDoc.getValue('configSource')")
      #set ($specifiedMigration = "$!prefillConfigDoc.getValue('specifiedMigration')")
      #if ($configSource == '')
        #set ($configSource = "default")
      #end
    #end
    &lt;p&gt;$escapetool.xml($services.localization.render('confluencepro.packages.prefillUsing'))&lt;/p&gt;
    &lt;p&gt;
      &lt;label&gt;
        &lt;input type="radio" name="config-source" value="default" id="config-source-default" autocomplete="off" #if ($configSource == "default") checked="checked" #end/&gt;
        $escapetool.xml($services.localization.render('confluencepro.packages.prefillUsingDefaults'))
      &lt;/label&gt;
    &lt;/p&gt;
    &lt;p&gt;
      &lt;label&gt;
        &lt;input type="radio" name="config-source" value="last" id="config-source-last" autocomplete="off" #if ($configSource == "last") checked="checked" #end/&gt;
        $escapetool.xml($services.localization.render('confluencepro.packages.prefillUsingLast'))
      &lt;/label&gt;
    &lt;/p&gt;
    &lt;p&gt;
      &lt;label&gt;
        &lt;input type="radio" name="config-source" value="specified" id="config-source-specified" autocomplete="off" #if ($configSource == "specified") checked="specified" #end/&gt;
        $escapetool.xml($services.localization.render('confluencepro.packages.prefillUsingSpecified'))
      &lt;/label&gt;
      #displaySelectMigrations("specified-migration", true)
    &lt;/p&gt;
    &lt;p&gt;
      &lt;label&gt;
        &lt;input type="checkbox" id="save-prefill-choices" name="save-prefill-choices" checked="checked" autocomplete="off" /&gt;
        $escapetool.xml($services.localization.render('confluencepro.packages.rememberPrefillConfig'))
      &lt;/label&gt;
  #end
#end
#**
 * Run the migration job if the `executed` flag is false and if there is a `package` set.
 * Display the status and the logs of the job.
 *
 * @param $obj the migration object of this page.
 *#
#macro(runMigrationJob $migrationDoc $startMigration)
  #set ($mainReference = $services.model.createDocumentReference('', ['ConfluenceMigratorPro', 'Code'], 'MigrationClass'))
  #set ($obj = $migrationDoc.getObject($mainReference, false))
  #set ($license = $services.licensing.licensor.getLicenseForEntity($mainReference))
  #if (!$services.licensing.licensor.hasLicensureForEntity($mainReference) || $license.type == 'TRIAL')
    #set ($discard = $xwiki.jsx.use('ConfluenceMigratorPro.Code.TrialScript'))
    {{warning}}$services.localization.render('confluencepro.migration.missingLicense'){{/warning}}
  #end
  #set ($confluenceJob = $services.confluenceMigration.getLastJob($migrationDoc.documentReference))
  #set ($package = $obj.getProperty('package').value)
  #set ($inputProperties = $jsontool.fromString($obj.getProperty('inputProperties').value))
  #set ($outputProperties = $jsontool.fromString($obj.getProperty('outputProperties').value))
  #if ($startMigration &amp;&amp; ("$!confluenceJob" == "" || $confluenceJob.status.state == 'NONE' || $confluenceJob.status.state == 'FINISHED'))
    #if ("$!package" != '' || "$!inputProperties.source" != '')
      ## If the package is missing, then the migration will use the 'source' parameter of the input properties.
      #set ($attachmentInputStream = $NULL)
      #if ("$!package" != '')
        #set ($confluenceHomeRef = $services.model.createDocumentReference('', 'ConfluenceMigratorPro', 'WebHome'))
        #set ($attachRef = $services.model.resolveAttachment($package, $confluenceHomeRef))
        #set ($attachDoc = $xwiki.getDocument($attachRef.documentReference))
        #set ($attachmentInputStream = $attachDoc.getAttachment($attachRef.name).getContentInputStream())
      #end
      #if ("$!outputProperties.get('authorPreserved')" == 'false')
        #set ($discard = $outputProperties.putIfAbsent('author', $xcontext.userReference))
      #end
      #set ($confluenceJob = $services.confluenceMigration.migrate($migrationDoc.documentReference, $attachmentInputStream, $inputProperties, $outputProperties))
      #set ($discard = $obj.set("executed", 2))
      #set ($discard = $migrationDoc.save("Executing the migration"))
    #end
  #end
#end
#**
 * Display an info box informing the user that migrations are managed on the main wiki.
 *#
#macro(displayMainWikiInfoBox)
  #set ($label = $services.rendering.escape($services.localization.render("confluencepro.extension.notMainWiki.link.label"), $xwiki.currentContentSyntaxId))
  #set ($message = $services.localization.render("confluencepro.extension.notMainWiki", $xwiki.currentContentSyntaxId, ['MAIN_LINK']))
  #set ($link = "[[$label&gt;&gt;$xcontext.mainWikiName:ConfluenceMigratorPro.WebHome]]")
  {{info}}
    $message.replace('MAIN_LINK', $link)
  {{/info}}
#end
{{/velocity}}</content>
  <object>
    <name>ConfluenceMigratorPro.Code.CommonCode</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>52554079-6259-4356-8c0b-11600edf3cf1</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery'], function ($) {
  $('.collapse').on('show.bs.collapse', function () {
    if ($(this).attr('id')) {
      $('a[href$="#' + $(this).attr('id') + '"]').find('.cfmTitleIcon').addClass('active');
    }
  });

  $('.collapse').on('hide.bs.collapse', function () {
    if ($(this).attr('id')) {
      $('a[href$="#' + $(this).attr('id') + '"]').find('.cfmTitleIcon').removeClass('active');
    }
  });

  $(function() {
    // Since the associated liveData is refreshed on file upload, we don't need a response container.
    const input = document.querySelector('#addConfluencePackage input[type=file]');
    if (input &amp;&amp; XWiki.FileUploader) {
      new XWiki.FileUploader(input, {
        'progressAutohide': true,
        'responseContainer' : document.createElement('div')
      });
    }
  });

  $(document).on('xwiki:html5upload:done', function(e) {
    if ($(e.target).prop('id') == 'confluenceUploadFile') {
      $('#confluencePackages').data('liveData').updateEntries();
    }
  });

  document.addEventListener("click", function (e) {
    const a = e.target.closest(".action_interrupt");
    if (!a) {
      return;
    }
    if (confirm("Are you sure you want to interrupt this migration?")) {
      location.href = a.href + "?interrupt=1";
    }
    e.preventDefault();
    e.stopPropagation();
    return false;
  });
});</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>ConfluenceMigratorPro.Code.CommonCode</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>39a8293c-7260-4327-bf92-b06afd2a2c13</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.cfmTitle {
  margin: 1.5em 0;
}

.cfmTitleIcon {
  min-width: 1em;
  display: inline-flex;
  justify-content: center;
  transition: all 0.5s;
}

.cfmTitleIcon.active {
  -webkit-transform: rotate(180deg);
  -moz-transform: rotate(180deg);
  transform: rotate(180deg);
}

.cfmTitle a {
  color: inherit;
}

.migrationState {
  display: flex;
  align-items: center;
}
.migrationState .migrationStateIcon {
  width: 1em;
  margin-right: 0.5em;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
