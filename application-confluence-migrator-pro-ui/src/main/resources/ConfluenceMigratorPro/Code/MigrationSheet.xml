<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->
<xwikidoc version="1.5" reference="ConfluenceMigratorPro.Code.MigrationSheet" locale="">
  <web>ConfluenceMigratorPro.Code</web>
  <name>MigrationSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="ConfluenceMigratorPro.Code.CommonCode" /}}

{{include reference="ConfluenceMigratorPro.ReferenceFixer.Code.CommonCode" /}}

{{velocity output="false"}}
#set ($discard = $xwiki.jsfx.use('uicomponents/job/job.js', true))
#set ($discard = $xwiki.jsx.use('ConfluenceMigratorPro.Code.JobRequestFix'))
#set ($discard = $xwiki.ssx.use('ConfluenceMigratorPro.Code.MigrationSheet'))
#set ($discard = $xwiki.jsx.use('ConfluenceMigratorPro.Code.MigrationSheet'))
#set ($discard = $xwiki.jsx.use('ConfluenceMigratorPro.Code.JobDoneEventEmitter'))

#set ($oldreverrors = $request.oldreverrors)

## Start of macro ##

#**
 * The view of the Migration when it is created. The title needs to be set and, if the request contains it,
 * the package field of the object is populated.
 *#
#macro(newDocView)

  #handlePrefilledValues

  {{html clean="false"}}
  &lt;label for="xwikidoctitleinput"&gt;
    &lt;h2&gt;$escapetool.xml($services.localization.render('confluencepro.migration.title.label'))&lt;/h2&gt;
  &lt;/label&gt;
  &lt;div class="xform"&gt;
    ## &lt;input type="hidden" name="form_token" value="$!escapetool.xml($services.csrf.token)" /&gt;
    #set ($docTitle = $doc.documentReference.name)
    #if ($docTitle == 'WebHome')
      #set ($docTitle = $doc.documentReference.parent.name)
    #end
    &lt;dl id="titleinput" class="form-group"&gt;
      &lt;dd&gt;
        &lt;input type="text" id="xwikidoctitleinput" name="title" value="$docTitle" class=""
          placeholder="$!escapetool.xml($services.localization.render('confluencepro.migration.title.placeholder'))"&gt;
      &lt;/dd&gt;
    &lt;/dl&gt;
    #if ("$!request.package" != '')
      #set ($discard = $prefilledValues['input'].remove('source'))
      &lt;input class="form-control" type="hidden"
        name="ConfluenceMigratorPro.Code.MigrationClass_0_package"
        id="ConfluenceMigratorPro.Code.MigrationClass_0_package"
        value="$!escapetool.xml($request.package)" /&gt;
    #elseif ("$!request.isPath" == '1')
      &lt;h2&gt;$escapetool.xml($services.localization.render('confluencepro.migration.source.title'))&lt;/h2&gt;
      &lt;dl&gt;
        &lt;dt&gt;
          &lt;label for="source"&gt;$escapetool.xml($services.localization.render("confluencepro.job.question.advanced.source"))&lt;/label&gt;
          &lt;span class="xHint"&gt;$escapetool.xml($services.localization.render("confluencepro.job.question.advanced.source.description"))&lt;/span&gt;
        &lt;/dt&gt;
        &lt;dd&gt;
          &lt;input type="text" class="cfm-input-filter-property" value="$prefilledValues['input'].getOrDefault('source', '')" data-key="source"&gt;
        &lt;/dd&gt;
      &lt;/dl&gt;
    #end
  &lt;/div&gt;
  ## Advanced options
  &lt;a data-toggle="collapse" href="#advancedInputFields" role="button" aria-expanded="false" aria-controls="advancedInputFields" class="advanced-fields collapsed"&gt;
    &lt;div class="cfmTitleIcon"&gt;
      $services.icon.renderHTML('caret-down')
    &lt;/div&gt;
    $escapetool.xml($services.localization.render('confluencepro.job.question.advanced.link'))
  &lt;/a&gt;
  &lt;div class="xform collapse confluence-migrator-collapse" id="advancedInputFields"&gt;
    #displayMigrationParameterFormFields
  &lt;/div&gt;
  {{/html}}

#end

#**
 * The view of the Migration when the context action is `view`. If the `package` of the object is populated
 * and the `executed` flag is set to false, execute the migration for that package. Otherwise, display the
 * report of the execution.
 *#
#macro(docView)
  ## Handle the upload and selection of a package using the attachment picker.
  #if ("$!request.package" != '' &amp;&amp; $services.csrf.isTokenValid($request.form_token))
    #set ($discard = $doc.set('package', $request.package))
    #set ($discard = $doc.save("Set the package field"))
  #end
  ## End of upload handling.
  #set ($obj = $doc.getObject('ConfluenceMigratorPro.Code.MigrationClass'))
  #if ("$!obj.getValue('executed')" == "" || "$obj.getValue('executed')" == "0")
    #if ($request.run || !($doc.documentReference.name.contains("__LM__") ||
    $doc.documentReference.name.contains("__CONTENT__")))
      #runMigrationJob($doc, true)
      #displayJob($obj)
    #else
      ## FIXME The following form cannot be post because the migrator refreshes the page at the end of the migration.
      {{html}}
        &lt;form method="get"&gt;
          &lt;button type="submit" class="btn btn-primary" name="run" value="1"&gt;Run&lt;/button&gt;
        &lt;/form&gt;
      {{/html}}
    #end
  #elseif ("$obj.getValue('executed')" == "2" &amp;&amp; $objecttool.isNotNull($services.confluenceMigration.getLastJob($doc.documentReference)))
    #runMigrationJob($doc, false)
    #displayJob($obj)
  #else
    #displayRaport($obj)
  #end
#end

#macro(filterCurrentRevision)
  #if ($oldreverrors != "unsupported")
    #set ($res = {})
    #foreach ($entry in $jsonObject.entrySet())
      #set ($lines = [])
      #set ($loglines = $entry.getValue().listIterator())
      #if ($objecttool.isNotNull($loglines))
        #foreach ($logline in $loglines)
          #set ($data = $logline.get("data"))
          #if ($objecttool.isNull($data))
            ## Old report without data about old revisions
            #set ($oldreverrors = "unsupported")
            #break
          #end
          #if ($oldreverrors || ($objecttool.isNull($logline.get("originalVersion")) || $logline.get("originalVersion") == $logline.get("pageId")))
            #set ($discard = $lines.add($data))
          #end
        #end
        #if (!$lines.isEmpty())
          #set ($discard = $res.put($entry.getKey(), $lines))
        #end
      #end
    #end
    #if ($oldreverrors != "unsupported")
      #set ($jsonObject = $res)
    #end
  #end
#end

#macro(getJSON $obj $name $dontParse)
  #set ($attachment = $doc.getAttachment("${name}.json"))
  #if ($objecttool.isNull($attachment))
    ## json strings used to be stored in the MigrationClass object
    #set ($json = $!obj.getValue($name))
  #else
    #set ($json = $attachment.getContentAsString())
  #end
  #if (!$dontParse &amp;&amp; $objecttool.isNotNull($json) &amp;&amp; !$json.isEmpty())
    #set ($jsonObject = $jsontool.fromString($json))
  #else
    #set ($jsonObject = {})
  #end
#end

#macro(computeRootSpace)
    #set ($rootSpaceStr = $inputProperties.get("root"))
    #if ("$!rootSpaceStr" == "")
      ## Gracefully handle the deprecated property
      #set ($rootSpaceStr = $inputProperties.get("rootSpace"))
    #end
    #if ("$!rootSpaceStr" == "")
      #set ($rootSpace = $services.model.createWikiReference($xcontext.getDatabase()))
    #elseif ($rootSpaceStr.startsWith("wiki:"))
      #set ($rootSpace = $services.model.createWikiReference($rootSpaceStr.substring(5)))
    #elseif ($rootSpaceStr.startsWith("space:"))
      #set ($rootSpace = $services.model.resolveSpace($rootSpaceStr.substring(6)))
    #else
      #if ($rootSpaceStr.endsWith(".WebHome"))
        #set ($rootSpaceStr = $rootSpaceStr.substring(0, $rootSpaceStr.length() - 8))
      #end
      #set ($rootSpace = $services.model.resolveSpace($rootSpaceStr))
    #end
    #set ($migrationWiki = $rootSpace.getRoot())
    ##FIXME: should we pass a space instead of the used wiki?
    #if ("$migrationWiki.type" == "WIKI")
      #set ($componentManager = $services.component.getComponentManager("wiki:${migrationWiki.name}"))
    #else
      #set ($componentManager = $services.component.getComponentManager("wiki:xwiki"))
    #end
#end

#**
 * Display a raport of the last executed job on this page.
 *#
#macro(displayRaport $obj)
  #if ("$obj.getValue('executed')" == '1')

    {{success}}
      $services.rendering.escape($services.localization.render('confluencepro.migration.raport.imported.success'), $xwiki.currentContentSyntaxId)
    {{/success}}

  #elseif ("$obj.getValue('executed')" == '2')
    #set ($confluenceJob = $services.confluenceMigration.getLastJob($doc.documentReference))
    #if ("$!confluenceJob" == "" || $confluenceJob.status.state == 'NONE' || $confluenceJob.status.state == 'FINISHED')

      {{error}}
        $services.rendering.escape($services.localization.render('confluencepro.migration.raport.imported.died'), $xwiki.currentContentSyntaxId)
      {{/error}}

    #end
  #elseif ("$obj.getValue('executed')" == '3')

    {{warning}}
      $services.rendering.escape($services.localization.render('confluencepro.migration.raport.imported.canceled'), $xwiki.currentContentSyntaxId)
    {{/warning}}

  #elseif ("$obj.getValue('executed')" == '4')

    {{error}}
      $services.rendering.escape($services.localization.render('confluencepro.migration.raport.imported.errored'), $xwiki.currentContentSyntaxId)
    {{/error}}

  #end

  #set ($outputProperties = $jsontool.fromString($obj.getProperty('outputProperties').value))
  #if ("$!outputProperties.get('onlyLinkMapping')" == "true")

    {{info}}
    Link-mapping only migration (spaces: $obj.get('spaces')).
    {{/info}}

  #else
    #displayMigrationInfo
  #end
  #displayFullLogSection
#end

#macro(displayFixLinks)
  &lt;div style="float:right"&gt;
    #displayNewReferenceFixingSessionLink("Fix links…", $doc.getDocumentReference())
  &lt;/div&gt;
#end

#macro(displayMigrationInfo)

  {{html clean=false}}
  ## Spaces section
  #set ($spaces = $obj.getProperty('spaces').value)
  #set ($imported = $obj.getValue('imported'))
  #set ($templates = $obj.getValue('templates'))
  #if ($objecttool.isNull($imported) || $imported == 0)
    #set ($imported = '0')
  #end
  #if ($objecttool.isNull($templates) || $templates == 0)
    #set ($templates = 0)
  #end
  #set ($revisions = $obj.getValue('revisions'))
  #if ($objecttool.isNull($revisions) || $revisions == 0)
    #set ($revisions = '0')
  #end
  #set ($spaceCount = $spaces.size())
  #if ($spaceCount == 0)
    #set ($spaceCount = "")
  #elseif ($spaceCount == 1)
    #displaySubtitle('check', 'confluencepro.migration.raport.imported.onespace.title', '', [$imported, $revisions, $templates])
  #else
    #displaySubtitle('check', 'confluencepro.migration.raport.imported.title', '', [$imported, $revisions, $templates, $spaceCount])
  #end

  {{/html}}

  {{html wiki=true clean=false}}

  &lt;ul class="imported-spaces"&gt;
    #set ($options = {})
    #set ($inputProperties = $jsontool.fromString($obj.getProperty('inputProperties').value))
    #computeRootSpace
    #foreach ($space in $spaces)
      #set ($spaceRef = $services.model.createSpaceReference($space, $rootSpace))
      #set ($spaceHomeEntityReference = $services.modelvalidation.transformEntityReference($services.model.createDocumentReference("WebHome", $spaceRef)))
      #set ($spaceHomeRef = $services.model.serialize($spaceHomeEntityReference))
      &lt;li&gt;
        &lt;a role="button" data-toggle="collapse" href="#importedSpace${foreach.count}" aria-expanded="false" aria-controls="importedSpace${foreach.count}"&gt;
          $services.icon.renderHTML('caret-down')
        &lt;/a&gt;
        [[$services.rendering.escape($services.rendering.escape($space, $xwiki.currentContentSyntaxId), $xwiki.currentContentSyntaxId)&gt;&gt;$services.rendering.escape($spaceHomeRef, $xwiki.currentContentSyntaxId)]]
        #set ($discard = $options.put('root', "document:$spaceHomeRef"))
        #set ($discard = $options.put('links', 'true'))
        #set ($discard = $options.put('compact', 'true'))
        &lt;div id="importedSpace${foreach.count}" class="imported-space collapse"&gt;
          #documentTree($options)
        &lt;/div&gt;
      &lt;/li&gt;
    #end
  &lt;/ul&gt;
  {{/html}}

  {{html wiki=false clean=false}}
  ## Missing macros
  &lt;div class="imported-macros-section"&gt;
    #displaySubtitle('list', 'confluencepro.migration.raport.macros.title', '', [])
    &lt;div class="imported-macros"&gt;
      #set ($supportedMacros = [])
      #set ($notSupportedMacros = [])
      #foreach ($macro in $jsontool.fromString($obj.getProperty('macros').value))
        #if ($componentManager.hasComponent('org.xwiki.rendering.macro.Macro', $macro))
          #set ($discard = $supportedMacros.add($macro))
        #else
          #set ($discard = $notSupportedMacros.add($macro))
        #end
      #end
      #if (!$supportedMacros.isEmpty())
        &lt;div class="imported-macros-title"&gt;
          &lt;span&gt;$escapetool.xml($services.localization.render('confluencepro.migration.raport.macros.supported'))&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class="imported-macros-icon supported" title="$escapetool.xml($services.localization.render('confluencepro.migration.raport.macros.supported.icon.title'))"&gt;
          $services.icon.renderHTML('check')
        &lt;/div&gt;
        &lt;div class="imported-macros-list"&gt;
          #foreach ($macro in $supportedMacros)
            &lt;span&gt;$macro&lt;/span&gt;
          #end
        &lt;/div&gt;
      #end
      #if (!$notSupportedMacros.isEmpty())
        &lt;div class="imported-macros-title"&gt;
          &lt;span&gt;$escapetool.xml($services.localization.render('confluencepro.migration.raport.macros.notSupported'))&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class="imported-macros-icon not-supported" title="$escapetool.xml($services.localization.render('confluencepro.migration.raport.macros.notSupported.icon.title'))"&gt;
          $services.icon.renderHTML('warning')
        &lt;/div&gt;
        &lt;div class="imported-macros-list"&gt;
          #foreach ($macro in $notSupportedMacros)
            &lt;span&gt;$macro&lt;/span&gt;
          #end
        &lt;/div&gt;
      #end
    &lt;/div&gt;
    {{/html}}

    {{html wiki=true clean=false}}

    #if ($supportedMacros.isEmpty())

      {{info}}{{translation key="confluencepro.migration.raport.macros.supported.noMacros"/}}{{/info}}

    #end
    #if ($notSupportedMacros.isEmpty())

      {{info}}{{translation key="confluencepro.migration.raport.macros.notSupported.noMacros"/}}{{/info}}

    #end

    {{/html}}

    {{html wiki=false clean=false}}
    &lt;p&gt;
      &lt;a href="https://store.xwiki.com/xwiki/bin/view/Extension/Confluence%20Migrator%20Application%20(Pro)#documentation"&gt;$escapetool.xml($services.localization.render('confluencepro.migration.raport.macros.link'))&lt;/a&gt;
    &lt;/p&gt;
  &lt;/div&gt;
  
  ## Issues section
  #getJSON($obj, 'problems')
  #filterCurrentRevision()
  #if (!$jsonObject.isEmpty())
    #displaySubtitle('warning', 'confluencepro.migration.raport.problems.done.title', '', [$jsonObject.keySet().size()])
    #displayJson('problems')
  #end

  ## Skipped section
  #getJSON($obj, 'skipped')
  #filterCurrentRevision()
  #if (!$jsonObject.isEmpty())
    #displaySubtitle('cross', 'confluencepro.migration.raport.problems.skipped.title', '', [$jsonObject.keySet().size()])
    #displayJson('skipped')
  #end

  ## Confluence reference warnings section
  #getJSON($obj, 'confluenceRefWarnings')
  #filterCurrentRevision()
  #if (!$jsonObject.isEmpty())
    #displaySubtitle('cross', 'confluencepro.migration.raport.problems.confluencerefs.title', '', [$jsonObject.keySet().size()])
    &lt;p&gt;$services.localization.render('confluencepro.migration.raport.problems.brokenLinks.info')&lt;/p&gt;
    #displayFixLinks
    #displayJson('confluenceRefWarnings')
    #set ($missingPages = $collectiontool.getSortedSet())
    #foreach ($entry in $jsonObject.entrySet())
      #foreach ($log in $entry.getValue())
        #set ($args = $log.get("args"))
        #if ($args.size() == 1)
          #set ($spaceKey = $args.get(0))
          #set ($pageTitle = "")
        #else
          #set ($spaceKey = $args.get(1))
          #set ($pageTitle = $args.get(0))
        #end
        #set ($discard = $missingPages.add("${spaceKey}.${pageTitle}"))
      #end
    #end
    &lt;details class="cfm-details"&gt;
      &lt;summary&gt;$services.localization.render('confluencepro.migration.raport.problems.confluencerefs.list')&lt;/summary&gt;
      &lt;table&gt;
        &lt;tr&gt;
          &lt;th&gt;$services.localization.render('confluencepro.migration.raport.confluencespace')&lt;/th&gt;
          &lt;th&gt;$services.localization.render('confluencepro.migration.raport.pageTitle')&lt;/th&gt;
        &lt;/tr&gt;
      #foreach ($missingPage in $missingPages)
        #set ($p = $missingPage.split('\.', 2))
        &lt;tr&gt;
          &lt;td&gt;$escapetool.xml($p[0])&lt;/td&gt;
          &lt;td&gt;$escapetool.xml($p[1])&lt;/td&gt;
        &lt;/tr&gt;
      #end
      &lt;/table&gt;
    &lt;/details&gt;
  #end

  ## Legacy broken links section
  #getJSON($obj, 'brokenLinksPages')
  #if (!$jsonObject.isEmpty())
    #displaySubtitle('cross', 'confluencepro.migration.raport.problems.brokenLinks.title', '', [$jsonObject.keySet().size()])
    &lt;p&gt;$services.localization.render('confluencepro.migration.raport.problems.brokenLinks.info')&lt;/p&gt;
    #displayFixLinks
    #displayJson('brokenLinksPages')
    #set ($json = "#getJSON($obj, 'brokenLinks')")
    #if ($objecttool.isNotNull($json) &amp;&amp; !$json.isEmpty())
      #set ($jsonObject = $jsontool.fromString($json))
      #if (!$jsonObject.isEmpty())
        &lt;details class="cfm-details"&gt;
          &lt;summary&gt;$services.localization.render('confluencepro.migration.raport.problems.brokenLinks.list')&lt;/summary&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;th&gt;$services.localization.render('confluencepro.migration.raport.confluencespace')&lt;/th&gt;
              &lt;th&gt;$services.localization.render('confluencepro.migration.raport.pageTitle')&lt;/th&gt;
            &lt;/tr&gt;
          #foreach($link in $jsonObject)
            &lt;tr&gt;
              &lt;td&gt;$escapetool.xml($link[0])&lt;/td&gt;
              &lt;td&gt;$escapetool.xml($link[1])&lt;/td&gt;
            &lt;/tr&gt;
          #end
          &lt;/table&gt;
        &lt;/details&gt;
      #end
    #end
  #end

  ## Missing users and groups section
  #getJSON($obj, 'missingUsersGroups')
  #if (!$jsonObject.isEmpty() &amp;&amp; (!$jsonObject.users.isEmpty() || !$jsonObject.groups.isEmpty()))
    #displaySubtitle('warning', 'confluencepro.migration.raport.problems.missingUsersGroups.title', '', [])
    &lt;p&gt;$services.localization.render('confluencepro.migration.raport.problems.missingUsersGroups.info')&lt;/p&gt;
    #if (!$jsonObject.groups.isEmpty())
      &lt;dl&gt;
        &lt;dt&gt;$services.localization.render('confluencepro.migration.raport.problems.missingUsersGroups.groups')&lt;/dt&gt;
        &lt;dd&gt;#foreach ($group in $jsonObject.groups)#if(!$foreach.first), #end$escapetool.xml($group)#end
        &lt;/dd&gt;
      &lt;/ul&gt;
    #end
    #if (!$jsonObject.users.isEmpty())
      &lt;dl&gt;
        &lt;dt&gt;$services.localization.render('confluencepro.migration.raport.problems.missingUsersGroups.users')&lt;/dt&gt;
        &lt;dd&gt;#foreach ($user in $jsonObject.users)#if(!$foreach.first), #end$escapetool.xml($user)#end
        &lt;/dd&gt;
      &lt;/ul&gt;
    #end
  #end

  ## Collision section
  #getJSON($obj, 'collisions')
  #set ($hasCollisions = false)
  #foreach ($spaceEntry in $jsonObject.entrySet())
    #if (!$spaceEntry.getValue().isEmpty())
      #set ($hasCollisions = true)
    #end
  #end
  #if ($hasCollisions)
    #displaySubtitle('warning', 'confluencepro.migration.raport.problems.collisions.title', '', [])
    &lt;p&gt;$services.localization.render('confluencepro.migration.raport.problems.collisions.info')&lt;/p&gt;
    &lt;table&gt;
      &lt;tr&gt;
        &lt;th&gt;space&lt;/th&gt;
        &lt;th&gt;reference&lt;/th&gt;
        &lt;th&gt;Confluence page titles&lt;/th&gt;
      &lt;/tr&gt;
      #foreach ($spaceEntry in $jsonObject.entrySet())
        #set ($spaceKey = $spaceEntry.getKey())
        #foreach ($collision in $spaceEntry.getValue().entrySet())
          &lt;tr&gt;
            &lt;td&gt;$escapetool.xml($spaceKey)&lt;/td&gt;
            &lt;td&gt;$escapetool.xml($collision.getKey())&lt;/td&gt;
            &lt;td&gt;
              #foreach($pageTitle in $collision.getValue())
                $escapetool.xml($pageTitle)
                #if (!$foreach.last)&lt;br /&gt;#end
              #end
            &lt;/td&gt;
          &lt;/tr&gt;
        #end
      #end
    &lt;/table&gt;
  #end

  ## Other issues section
  #getJSON($obj, 'otherIssues')
  #filterCurrentRevision()

  #if (!$jsonObject.isEmpty())
    #displaySubtitle('question', 'confluencepro.migration.raport.problems.other.title', '', [])
    #displayJson('otherIssues')
  #end

  {{/html}}

  -----

  #if ($oldreverrors != "unsupported")
  {{info}}
      #if ($oldreverrors)
        Issues impacting old revisions are displayed in the summary. [[Hide&gt;&gt;||queryString=""]].
      #else
        Issues impacting old revisions are hidden from the summary. [[Show&gt;&gt;||queryString="oldreverrors=1"]].
      #end
  {{/info}}
  #end
#end

#macro(displayFullLogSection)
  #set ($discard = $xwiki.ssfx.use('uicomponents/logging/logging.css', true))
  #set ($discard = $xwiki.jsfx.use('uicomponents/logging/logging.js', true))

  {{html clean=false}}
  #displaySubtitle('info', 'confluencepro.migration.raport.logs.title', '', [])
  #if ($stringtool.isNotEmpty($obj.getValue("logs")))
    #if ($request.fulllogs)
      #getJSON($obj, 'logs')
      &lt;ul class="log"&gt;
      #foreach ($log in $jsonObject)
      &lt;li class="log-item log-item-$!{log.level.toLowerCase()}"&gt;
        &lt;div&gt;$xwiki.formatDate($log.timeStamp) $escapetool.xml($log.message)&lt;/div&gt;
        #if ($log.throwable)
        &lt;div class="stacktrace"&gt;&lt;pre&gt;$escapetool.xml($stringtool.join($log.throwable, "
  "))&lt;/pre&gt;&lt;/div&gt;
        #end
      &lt;/li&gt;
      #end
      &lt;/ul&gt;
    #else
      &lt;p&gt;&lt;a class="btn btn-primary" href="?fulllogs=1"&gt;$services.localization.render('confluencepro.migration.raport.displayFullLog')&lt;/a&gt;&lt;/p&gt;
    #end
  #else
    &lt;div id="cfmLogs" data-log-method="#if ($objecttool.isNull($doc.getAttachment('logs.json')))service#else{attachment}#end"&gt;
      #if ($request.fulllogs)
        &lt;div class="loading-icon loading"&gt;&lt;/div&gt;
      #else
        &lt;p&gt;&lt;a id="cfm-full-logs" class="btn btn-primary" href="?fulllogs=1"&gt;$services.localization.render('confluencepro.migration.raport.displayFullLog')&lt;/a&gt;&lt;/p&gt;
      #end
      &lt;noscript&gt;$services.localization.render('confluencepro.migration.raport.pleaseenablejs')&lt;/noscript&gt;
    &lt;/div&gt;
  #end
    &lt;p&gt;
      &lt;a href="$xwiki.getURL($doc.documentReference.parent)"&gt;$escapetool.xml($services.localization.render('confluencepro.migration.raport.viewall.button'))&lt;/a&gt;
      &lt;a href="?text=1"&gt;$services.localization.render('confluencepro.migration.raport.viewtext')&lt;/a&gt;
    &lt;/p&gt;
  {{/html}}

#end

#**
 * Display the properties of a json in a structured way.
 *#
#macro(displayJson $category)
  &lt;p&gt;
    &lt;button class="cfm-unfold-all btn" type="button"&gt;Unfold all&lt;/button&gt;
    &lt;button class="cfm-fold-all btn"   type="button"&gt;Fold all&lt;/button&gt;
  &lt;/p&gt;
  &lt;ul class="cfm-problem-pages"&gt;
  #foreach ($entry in $jsonObject.entrySet())
    #if ($entry.key.contains("."))
      #set ($docRef = $services.model.resolveDocument($entry.key))
    #end
    &lt;li class="cfm-problem-page"&gt;
      &lt;div class="cfm-page"&gt;
        &lt;a role="button" data-toggle="collapse" href="#cfmPage-${category}-${foreach.count}" aria-expanded="false" aria-controls="cfmPage-${category}-${foreach.count}"&gt;
          &lt;div class="cfmTitleIcon"&gt;
            $services.icon.renderHTML('caret-down')
          &lt;/div&gt;
        &lt;/a&gt;
        #if ($entry.key.contains("."))
          #renderReferenceNicely($docRef)
        #else
          $escapetool.xml($entry.key)
        #end
      &lt;/div&gt;
      &lt;div id="cfmPage-${category}-${foreach.count}" class="cfm-problems collapse"&gt;
        &lt;ul&gt;
          #foreach ($problem in $entry.value)
            &lt;li class="cfm-problem"&gt;
              #set ($msg = $problem.get("msg"))
              #if ($objecttool.isNull($msg))
                $escapetool.xml($problem)
              #else
                #foreach ($a in $problem.get("args"))
                  #set ($msg = $stringtool.replaceOnce($msg, "{}", $a))
                #end
                $escapetool.xml($msg)
              #end
            &lt;/li&gt;
          #end
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/li&gt;
  #end
  &lt;/ul&gt;
#end

#macro(displayBrokenLinks $jsonObject, $l10nkey)
  &lt;details class="cfm-details"&gt;
    &lt;summary&gt;$services.localization.render($l10nkey)&lt;/summary&gt;
    &lt;table&gt;
      &lt;tr&gt;
        &lt;th&gt;$services.localization.render('confluencepro.migration.raport.confluencespace')&lt;/th&gt;
        &lt;th&gt;$services.localization.render('confluencepro.migration.raport.pageTitle')&lt;/th&gt;
      &lt;/tr&gt;
    #foreach($link in $jsonObject)
      &lt;tr&gt;
        &lt;td&gt;$escapetool.xml($link[0])&lt;/td&gt;
        &lt;td&gt;$escapetool.xml($link[1])&lt;/td&gt;
      &lt;/tr&gt;
    #end
    &lt;/table&gt;
  &lt;/details&gt;
#end

#**
 * Display the job.
 *
 * @param $confluenceJob the job that will be displayed.
 *#
#macro(displayJob $obj)
  #set ($package = $obj.getProperty('package').value)
  #if ("$!package" == '' &amp;&amp; "$!inputProperties.source" == '')
    #displayZipPickerForm
  #else
    #set ($confluenceJob = $services.confluenceMigration.getLastJob($doc.documentReference))

    {{html}}
    #template('job_macros.vm')
    #set ($jobStatus = $confluenceJob.status)
    #set ($jobState = $jobStatus.state)
    #set ($finished = $jobState == 'FINISHED')
    #if (!$finished &amp;&amp; "$!request.interrupt" == "1")
      $jobStatus.cancel()
    #end
    #set ($jobRequest = $jobStatus.request)
    #if ($request.fulljoblogs)
      #set ($jobStatusURL = $doc.getURL('get', $escapetool.url({
        'xpage': 'job_status_json',
        'outputSyntax': 'plain',
        'jobId': $jobRequest.id,
        'translationPrefix': $translationPrefix
      })))
    #else
      #set ($jobStatusURL = $xwiki.getDocument('ConfluenceMigratorPro.Code.CustomJobStatusJSON').getURL('get', $escapetool.url({
        'xpage': 'get',
        'outputSyntax': 'plain',
        'jobId': $jobRequest.id,
        'translationPrefix': $translationPrefix
      })))
    #end
    &lt;div class="xcontent job-status" data-url="$escapetool.xml($jobStatusURL)"&gt;
      &lt;div class="job-loading-status"&gt;
        &lt;div class="loading-icon loading"&gt;&lt;/div&gt;
        &lt;span class="loading-text"&gt;$escapetool.xml($services.localization.render('confluencepro.job.status.readingPackage'))&lt;/span&gt;
      &lt;/div&gt;
      #set($titleKey = "${translationPrefix}.label")
      #if ($services.localization.get($titleKey))
        &lt;h2&gt;$escapetool.xml($services.localization.render($titleKey))&lt;/h2&gt;
        #set($titleHintKey = "${translationPrefix}.hint")
        #if ($services.localization.get($titleHintKey))
          &lt;p class="text-muted small"&gt;$escapetool.xml($services.localization.render($titleHintKey))&lt;/p&gt;
        #end
      #end
      #if (!$finished)
        #displayJobProgressBar($jobStatus)
        #displayJobQuestion($jobStatus)
      #else
        #jobFinishedMessage($status, $translationPrefix)
      #end
      #if ($showLogs || $isAdvancedUser || $isSuperAdmin)
        #set ($collapseLogs = !$request.fulljoblogs)
        #displayJobStatusLog($jobStatus, $collapseLogs)
        #if (!$finished)
          #if (!$request.fulljoblogs)
          &lt;form method="get"&gt;
            &lt;div class="box note" id="partial-logs-note"&gt;
              &lt;p&gt;For performance and stability reasons, logs are only shown partially and lines might be missing. &lt;button id="display-full-job-logs" class="btn btn-secondary" value="1" name="fulljoblogs"&gt;$services.localization.render('confluencepro.migration.raport.displayFullLog')&lt;/button&gt;&lt;/p&gt;
            &lt;/div&gt;
          &lt;/form&gt;
          #end
          &lt;p style="text-align:right"&gt;
            &lt;input type="button" class="btn btn-danger" value="$services.localization.render('confluencepro.job.interrupt.button')" name="interrupt" id="cfmInterrupt"/&gt;
          &lt;/p&gt;
        #end
      #end
    &lt;/div&gt;
    {{/html}}

  #end
#end

#**
 * Display a form with a zip picker and a submit button.
 *#
#macro(displayZipPickerForm)

  {{html clean="false"}}
  &lt;h2&gt;$escapetool.xml($services.localization.render('confluencepro.zippicker.title'))&lt;/h2&gt;
  &lt;form class="xform"&gt;
    &lt;input type="hidden" name="form_token" value="$!escapetool.xml($services.csrf.token)" /&gt;
    #set ($zipExtension = '.zip')
    #set ($zipMediaType = 'application/zip')
    #set ($parameters = {
        'data-upload-allowed': $services.security.authorization.hasAccess('edit'),
        'data-accept': "$zipExtension, $zipMediaType",
        'placeholder': $services.localization.render('confluencepro.zippicker.placeholder'),
        'name': 'package',
        'data-document-reference': 'ConfluenceMigratorPro.WebHome'
    })
    #set ($discard = $parameters.put('class', "$!parameters.get('class') pick-attachment-resource"))
    #attachmentPicker_import
    #suggestInput($parameters)
    &lt;button type="submit" class="btn btn-primary"&gt;
    $escapetool.xml($services.localization.render('confluencepro.zippicker.button.submit'))
    &lt;/button&gt;
  &lt;/form&gt;
  {{/html}}

#end

#**
 * Migrate properties that need to be migrated
 *#
#macro(migrateProps)
  #set($jsonProperties = ['problems', 'skipped', 'brokenLinksPages', 'brokenLinks', 'otherIssues', 'logs'])
  #set ($updated = false)
  #set ($obj = $doc.getObject('ConfluenceMigratorPro.Code.MigrationClass'))
  #if ($objecttool.isNotNull($obj))
    #foreach ($p in $jsonProperties)
        #set ($json = $obj.getValue($p))
        #if ($stringtool.isNotEmpty($json))
            #set ($discard = $doc.addAttachment("${p}.json", $json.getBytes()))
            #set ($discard = $obj.set($p, $objecttool.null))
            #set ($discard = $obj.getBaseObject().removeField($p))
            #set ($updated = true)
        #end
    #end
  #end
  #if ($updated)
      #set($discard = $doc.save($services.localization.render("confluencepro.migration.migratepropsdocsave")))

      {{success}}
        $services.localization.render("confluencepro.migration.propertiessuccessfullymigrated")
      {{/success}}

  #else

      {{info}}
          $services.localization.render("confluencepro.migration.nopropertiestomigrate")
      {{/info}}

  #end
#end

#macro(textReport)
  $xcontext.setFinished(true)
  #computeRootSpace
  #set ($os = $response.getOutputStream())
  #set ($obj = $doc.getObject('ConfluenceMigratorPro.Code.MigrationClass'))
  $response.setContentType("text/plain; charset=utf-8")

  #if ("$obj.getValue('executed')" == '0')
    #set ($status = $services.localization.render('confluencepro.migration.livetable.state.none'))
  #elseif ("$obj.getValue('executed')" == '1')
    #set ($status = $services.localization.render('confluencepro.migration.livetable.state.done'))
  #elseif ("$obj.getValue('executed')" == '2')
    #set ($confluenceJob = $services.confluenceMigration.getLastJob($doc.documentReference))
    #if ("$!confluenceJob" == "" || $confluenceJob.status.state == 'NONE' || $confluenceJob.status.state == 'FINISHED')
      #set ($status = $services.localization.render('confluencepro.migration.livetable.state.died'))
    #else
      #set ($status = $services.localization.render('confluencepro.migration.livetable.state.running'))
    #end
  #elseif ("$obj.getValue('executed')" == '3')
    #set ($status = $services.localization.render('confluencepro.migration.livetable.state.canceled'))
  #elseif ("$obj.getValue('executed')" == '4')
    #set ($status = $services.localization.render('confluencepro.migration.livetable.state.errored'))
  #else
    #set ($status = $obj.getValue('executed'))
  #end
  $os.print("Status: $status$escapetool.N")

  #if ($obj.getValue('imported'))
    $os.print("Number of imported pages: $obj.getValue('imported')$escapetool.N")
  #end

  #if ($obj.getValue('templates'))
    $os.print("Number of imported templates: $obj.getValue('templates')$escapetool.N")
  #end

  #if ($obj.getValue('spaces'))
    $os.print("Imported spaces: $obj.getValue('spaces')$escapetool.N")
  #end

  #set ($inputProps = $jsontool.fromString($obj.getValue('inputProperties')))
  #if ($objecttool.isNotNull($inputProps))
    $os.print("Input properties:$escapetool.N")
    #foreach ($inputProp in $inputProps.entrySet())
      $os.print(" - $inputProp.key: $inputProp.value$escapetool.N")
    #end
  #end

  #set ($outputProps = $jsontool.fromString($obj.getValue('outputProperties')))
  #if ($objecttool.isNotNull($outputProps))
    $os.print("Output properties:$escapetool.N")
    #foreach ($inputProp in $outputProps.entrySet())
      $os.print(" - $inputProp.key: $inputProp.value$escapetool.N")
    #end
  #end
  #set ($supportedMacros = [])
  #set ($notSupportedMacros = [])
  #foreach ($macro in $jsontool.fromString($obj.getProperty('macros').value))
    #if ($componentManager.hasComponent('org.xwiki.rendering.macro.Macro', $macro))
      #set ($discard = $supportedMacros.add($macro))
    #else
      #set ($discard = $notSupportedMacros.add($macro))
    #end
  #end
  $os.print("Supported macros: $supportedMacros$escapetool.N")
  $os.print("Unsupported macros: $notSupportedMacros$escapetool.N")

  ## Legacy, for old migrations
  #getJSON($obj, 'brokenLinksPages')
  #if (!$jsonObject.isEmpty())
    $os.print("Pages with broken links:$escapetool.N")
    #foreach ($page in $jsonObject.keySet())
      $os.print(" - $page$escapetool.N")
    #end
  #end

  ## Legacy, for old migrations
  #getJSON($obj, 'brokenLinks')
  #if (!$jsonObject.isEmpty())
    $os.print("Broken links:$escapetool.N")
    #foreach ($page in $jsonObject)
      $os.print(" - spaceKey: $page[0], title: $page[1]$escapetool.N")
    #end
  #end

  #foreach ($entry in ['problems', 'skipped', 'otherIssues'])
    #getJSON($obj, $entry, true)
    #if (!$jsonObject.isEmpty())
      $os.print("$escapetool.N")
      #if ($entry == "otherIssues")
        $os.print("other issues:$escapetool.N")
      #elseif ($entry == "logs")
        $os.print("all logs:$escapetool.N")
      #else
        $os.print("$entry:$escapetool.N")
      #end
      #set ($json = $json.substring(1, $json.length() - 1))
      $os.print($json.replace(',{"timeStamp":', ',' + $escapetool.N + '{"timeStamp":'))
    #end
  #end
  $xcontext.put("migrationName", $doc.documentReference.name)
  $os.println("${escapetool.N}${escapetool.N}Full logs:")

  {{include reference="ConfluenceMigratorPro.Code.Logs" context="current" /}}
#end
{{/velocity}}

{{template name="documentTree_macros.vm" /}}

{{velocity}}
#set ($discard = $doc.use('ConfluenceMigratorPro.Code.MigrationClass'))
#if (!$xcontext.isMainWiki())
  #displayMainWikiInfoBox
#elseif ($xcontext.action == 'edit' || $xcontext.action == 'admin')
  #if ($doc.isNew())
    #newDocView
  #else
  #end
#elseif ($hasAdmin)
  #if ($request.migrateprops == 1)
    #migrateProps
  #elseif ($request.text == 1)
    #textReport
  #else
    #docView
  #end
#else
  {{error}}
  {{translation key="confluencepro.norights" /}}
  {{/error}}
#end
{{/velocity}}</content>
  <object>
    <name>ConfluenceMigratorPro.Code.MigrationSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>8753e50f-2868-403d-9f62-7cbde9895a8f</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define("confluence-job", {
  prefix: "confluencepro.job.",
  keys: [
    "question.additionalInfo.documentsCount",
    "question.additionalInfo.attachmentsCount",
    "question.showMore.message",
    "question.showMore.link",
    "status.runningJob",
  ],
});
require(["jquery", "xwiki-l10n!confluence-job", "xwiki-job-runner"], function (
  $,
  l10n,
  JobRunner,
) {
  let checkedValues = new Set();
  // Send search request to server and update the displayed questions.
  let searchAndDisplay = function (url, qSearch, offset) {
    if (!url) {
      return;
    }
    let template = $(".available-space.hidden");
    $.getJSON(url + "&amp;qSearch=" + qSearch + "&amp;offset=" + offset).done(
      function (data) {
        if (offset == 0) {
          $(".available-space").each(function () {
            if (
              this.className === "available-space" &amp;&amp;
              !$(this).find("input").prop("checked")
            ) {
              this.remove();
            }
          });
        }
        let createdElements = [];
        data.results.forEach(function (space, index) {
          if (checkedValues.has(space.reference)) {
            return;
          }
          let element = template.clone();
          element.toggleClass("hidden");
          element
            .find("label")
            .attr("for", "confluence_space_" + index)
            .append(document.createTextNode(space.reference));
          if (space.properties.name) {
            let spaceTitle = document.createElement("span");
            spaceTitle.append(document.createTextNode(' - ' + space.properties.name));
            element.find("label").append(spaceTitle);
            delete space.properties.name;
          }
          element
            .find("input")
            .attr("id", "confluence_space_" + index)
            .prop("disabled", false)
            .val(space.reference);
          createdElements.push(element);
          for (const [key, value] of Object.entries(space.properties)) {
            element
              .find(".cfmProperties")
              .append(
                "&lt;span&gt;" +
                  l10n["question.additionalInfo." + key] +
                  " " +
                  value +
                  "&lt;/span&gt;",
              );
          }
        });
        $(".ui-question").trigger("confluence:job:spaces:loaded", [
          createdElements,
        ]);
        createdElements.each(function (elem) {
          $(".available-spaces").append(elem);
        });
        let remaining = data.total - (offset + data.results.length);
        if (remaining &gt; 0) {
          $(".cfmShowMoreGroup").removeClass("hidden");
          $(".cfmShowMoreMessage").text(
            l10n.get("question.showMore.message", remaining),
          );
          $(".cfmShowMoreLink")
            .text(l10n.get("question.showMore.link"))
            .data("offset", data.total - remaining);
        } else {
          $(".cfmShowMoreGroup").addClass("hidden");
        }
      },
    );
  };
  let initQuestion = function () {
    $(".job-loading-status").hide();
    $(this)
      .find(".btn-primary")
      .on("click", function () {
        $(".job-loading-status").show();
        $(".job-loading-status .loading-text").text(
          l10n.get("status.runningJob"),
        );
      });
    searchAndDisplay($(".cfmSearch input").data("url"), "", 0);
  };
  // Add listener to the show more link.
  $(document).on("click", ".cfmShowMoreLink", function (event) {
    event.preventDefault();
    let offset = $(this).data("offset");
    if (offset) {
      searchAndDisplay(
        $(".cfmSearch input").data("url"),
        $(".cfmSearch input").val(),
        offset,
      );
    }
  });
  // Add listener to job question search input.
  let timeout;
  $(document).on("input", ".cfmSearch input", function () {
    if (timeout) {
      clearTimeout(timeout);
    }
    let input = $(this);
    timeout = setTimeout(function () {
      searchAndDisplay(input.data("url"), input.val(), 0);
    }, 1000);
  });
  // Add listener to selectall checkbox.
  $(document).on("change", "#cfmSelectAllInput", function () {
    $(".available-space input").prop("checked", $(this).prop("checked"));
  });
  $(document).on("change", ".available-space input", function () {
    if (!$(this).prop("checked")) {
      checkedValues.delete($(this).val());
      $("#cfmSelectAllInput").prop("checked", false);
    } else {
      checkedValues.add($(this).val());
    }
  });
  $(".ui-question").each(function () {
    let uiQuestion = $(this);
    // Register for any event in the future
    uiQuestion.on("job:question:loaded", initQuestion);
  });
  $(".job-status").on("xwiki:job:done", function () {
    const interro = location.href.indexOf('?');
    if (interro === -1) {
      location.reload();
    } else {
      // We don't want parameters like fulljoblogs to stay
      location.href = location.href.substring(0, interro);
    }
  });
  document.getElementById("cfmInterrupt")
    ?.addEventListener("click", function (e) {
      if (confirm("Are you sure you want to interrupt this migration?")) {
        const cancelButton = document.querySelector("button.btAnswerCancel");
        if (cancelButton) {
          cancelButton.click();
        } else {
          $.ajax("?interrupt=1", {
            method: "POST",
            contentType: "text/plain",
            data: "0",
          });
        }
      }
    });

  $(".cfm-unfold-all").on("click", function (e) {
    const ul = e?.target?.parentNode?.nextElementSibling;
    if (ul) {
      for (const a of ul.querySelectorAll('a[aria-expanded="false"]')) {
        a.click();
      }
    }
  });

  $(".cfm-fold-all").on("click", function (e) {
    const ul = e?.target?.parentNode?.nextElementSibling;
    if (ul) {
      for (const a of ul.querySelectorAll('a[aria-expanded="true"]')) {
        a.click();
      }
    }
  });

  function format(message, args) {
    const m = message.split("{}");
    let res = m[0];
    for (let i = 1; i &lt; m.length; i++) {
      res += args[i - 1] + m[i];
    }
    return res;
  }

  function parse(l, method) {
    if (method === "attachment") {
      return l;
    }

    if (!l.trim()) {
      return null;
    }
    try {
      return JSON.parse(l);
    } catch (e) {
      console.log("Could not parse the following JSON line:", l, e);
      return null;
    }
  }

  function lines(jsonLogs, method) {
    if (method === "attachment") {
      return jsonLogs;
    }

    return jsonLogs.split("\n");
  }

  const logs = document.getElementById("cfmLogs");
  if (logs) {
    const fullLogsBtn = document.getElementById("cfm-full-logs");
    if (fullLogsBtn) {
      fullLogsBtn.onclick = function (e) {
        getLogs();
        e.preventDefault();
      }
    } else {
      getLogs();
    }
  }

  function getLogs() {
    // if method === "attachment", the logs were saved as an attachments (old
    // migrations, we don't do it like this anymore), and we shall use it
    // instead of the log tail because PageIdentifier objects in these logs are
    // not parsed correctly
    const method = logs.dataset.logMethod;

    const logsURL = method === "attachment"
      ? XWiki.currentDocument.getURL("download") + "/logs.json"
      : new XWiki.Document(new XWiki.DocumentReference(
            XWiki.currentWiki,
            ["ConfluenceMigratorPro", "Code"],
            "Logs"
        )).getURL("get") + "?action=alllogs&amp;name=" + encodeURIComponent(XWiki.currentDocument.page);

    $.get(logsURL).then(function (jsonLogs) {
      const ul = document.createElement("ul");
      ul.className = "log";
      for (const l of lines(jsonLogs, method)) {
        const log = parse(l, method);
        if (!log) {
          continue;
        }
        const li = document.createElement("li");
        li.className = "log-item log-item-" + (log.level?.toLowerCase() || "");
        const div = document.createElement("div");
        const d = new Date(log.timeStamp);
        const datetime = d.toLocaleDateString() + " " + d.toLocaleTimeString();
        const msg = log.args ? format(log.message, log.args) : log.message;
        div.textContent = datetime + " " + msg;
        li.appendChild(div);
        if (log.throwable) {
          const divStack = document.createElement("div");
          divStack.className = "stacktrace";
          divStack.textContent = log.throwable.join("\n");
          li.appendChild(divStack);
        }
        ul.appendChild(li);
      }
      logs.textContent = "";
      logs.appendChild(ul);
    });
  }
});</code>
    </property>
    <property>
      <name>Job related JavaScript</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>ConfluenceMigratorPro.Code.MigrationSheet</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>dec20898-0fa9-4eeb-81ed-cdfd0151168e</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery'], function ($) {
  function handleFilterPropertyChange() {
    const input = document.getElementById(
      this.classList.contains('cfm-input-filter-property')
        ? 'cfm-input-properties'
        : 'cfm-output-properties'
    );

    if (input) {
      let json = {};
      try {
        json = JSON.parse(input.value);
      } catch (e) {
        console.error("Could not parse the json value of input", input, e);
      }
      json[this.dataset.key] = this.value;
      input.value = JSON.stringify(json);
    } else {
        console.error("BUG: could not find the input to update for this property", this);
    }
  };

  $('.cfm-input-filter-property').on('change', handleFilterPropertyChange);
  $('.cfm-output-filter-property').on('change', handleFilterPropertyChange);
});</code>
    </property>
    <property>
      <name>Sheet related JavaScript</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>ConfluenceMigratorPro.Code.MigrationSheet</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>1f15f84c-68e0-4966-94e3-c02caad8acdd</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.available-space {
  margin-top: .5em;
  padding-bottom: .5em;
  display: grid;
  grid-template-areas: "a b"
                       "c d";
  grid-template-columns: fit-content(1ch) 1fr;
  gap: 0 0.5em;
}

.available-space label {
  font-weight: normal;
  grid-area: b;
}

.available-space input {
  grid-area: a;
}

.available-space .cfmProperties {
  grid-area: d;
}

.available-space span {
  margin-right: 0.5em;
  font-weight: lighter;
}

.imported-spaces {
  list-style-type: none;
}

.imported-space {
  padding: 1em;
}

.cfmToolbar {
  display: flex;
  margin-bottom: 2em;
  align-items: flex-end;
  gap: 0 2em;
}

.cfmButtonGroup {
  margin-top: 2em;
}

.cfmShowMoreGroup {
  font-style: italic;
}

.job-loading-status {
  display: flex;
  align-items: center;
}

.job-loading-status .loading-icon {
  height: 1em;
  width: 1em;
  margin-right: 1em;
}

.cfm-problem-pages {
  list-style: none;
}

.imported-macros {
  display: grid;
  grid-template-areas: "a b c";
  grid-template-columns: fit-content(30%) fit-content(1ch) auto;
  gap: .5em .5em;
  margin-bottom: 1em;
}

.imported-macros-title {
  font-weight: 700;
}

.imported-macros-icon.supported {
  color: @brand-success;
}
.imported-macros-icon.not-supported {
  color: @brand-warning;
}

.imported-macros-list span::after {
  content: ',';
}

.imported-macros-list span:last-child::after {
  content: '';
}

details.cfm-details summary {
  display: list-item;
}

.xcontent.job-status:has(&gt; dl.xform &gt; dt &gt; .collapsed) #partial-logs-note {
  display: none;
}

.log-item:has(&gt;.fake-log-items) {
  display: none;
}

.edit_section {
  display: none;
}</code>
    </property>
    <property>
      <contentType>LESS</contentType>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
