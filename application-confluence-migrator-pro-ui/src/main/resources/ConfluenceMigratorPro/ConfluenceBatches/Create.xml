<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="ConfluenceMigratorPro.ConfluenceBatches.Create" locale="">
  <web>ConfluenceMigratorPro.ConfluenceBatches</web>
  <name>Create</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>ConfluenceMigratorPro.ConfluenceBatches.New</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Create</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="ConfluenceMigratorPro.Code.CommonCode" /}}

{{groovy}}
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.stream.Collectors;

import groovy.json.JsonOutput;
import groovy.json.JsonSlurper;
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.doc.XWikiDocument;
import com.xpn.xwiki.objects.BaseObject;
import org.xwiki.model.reference.LocalDocumentReference;

import org.xwiki.model.reference.DocumentReference;

import com.xpn.xwiki.api.Object;
import com.xpn.xwiki.api.Document;
import com.xpn.xwiki.doc.XWikiDocument;
import com.fasterxml.jackson.databind.ObjectMapper

MIGRATION_BASENAME_PATTERN = Pattern.compile('(?:.*/)?([^/]+?)(?:\\.zip)?$', Pattern.CASE_INSENSITIVE);
migrationDocs = new ArrayList&lt;Document&gt;();

Document getMigrationDoc(String batchName, String migrationBasename, XWikiContext context)
{
    int migrationIndex = 0;
    XWikiDocument migrationDoc = null;
    while (migrationDoc == null || !migrationDoc.isNew()) {
        DocumentReference migrationReference = new DocumentReference(
            xcontext.getDatabase(),
            ["ConfluenceMigratorPro", "Migrations"],
            "Batch_" + batchName + "__CONTENT__" + migrationBasename + migrationIndex
        );
        migrationDoc = new XWikiDocument(migrationReference);
        migrationIndex = migrationIndex + 1;
    }
    return new Document(migrationDoc, context);
}

static String ensureFilePrefix(String source)
{
    if (source.startsWith("file:")) {
        return source;
    }

    return "file://" + source;
}

void createMigrations(String batchName, String[] sources, Map&lt;String, String&gt; inputPropertiesMap, String outputProperties, boolean dryRun)
{
    def messageList = new LinkedList()
    for (String source : sources) {
        Matcher m = MIGRATION_BASENAME_PATTERN.matcher(source);
        if (m.matches()) {
            String migrationBasename = m.group(1);
            XWikiContext context = xcontext.getContext();
            Document migrationDoc = getMigrationDoc(batchName, migrationBasename, context);
            Object migrationObject = migrationDoc.getObject("ConfluenceMigratorPro.Code.MigrationClass", true);
            Map&lt;String, String&gt; ownInputPropertiesMap = new HashMap&lt;&gt;(inputPropertiesMap);
            ownInputPropertiesMap.put("source", ensureFilePrefix(source));
            migrationObject.set("inputProperties", new JsonOutput().toJson(ownInputPropertiesMap));
            migrationObject.set("outputProperties", outputProperties);
            if (dryRun) {
               messageList.add("Would create " + migrationDoc.getDocumentReference() + "\n")
            }
            else {
              migrationDoc.save();
              messageList.add("Creating " + migrationDoc.getDocumentReference() + "\n")
              migrationDocs.add(migrationDoc)
            }
        } else {
            println("Could not create a migration basename for package " + source);
        }
    }
    xcontext.put('pageThatCouldBeCreated', messageList)
}

static String getPropertiesAsJSON(request, String type)
{
    String[] properties = request.getParameterMap().get("ConfluenceMigratorPro.Code.MigrationClass_0_" + type + "Properties")
    if (properties == null || properties.length == 0) {
        return null;
    }
    return properties[0];
}

batchName = request.batchName;

String inputProperties = getPropertiesAsJSON(request, "input");
String outputProperties = getPropertiesAsJSON(request, "output");
String[] sources = request.getParameterMap().get("source");
boolean linkMappingPass = request.linkMappingPass &amp;&amp; request.linkMappingPass != "off" &amp;&amp; request.linkMappingPass != "0";
boolean dryRun = request.dryRun &amp;&amp; request.dryRun != "0" &amp;&amp; request.dryRun != "off";

def mapper = new ObjectMapper()
xcontext.put('batchName', batchName);
xcontext.put('sources', sources);
xcontext.put('inputProperties', mapper.readValue(inputProperties, Map));
xcontext.put('outputProperties', mapper.readValue(outputProperties, Map));
xcontext.put('linkMappingPass', linkMappingPass);
xcontext.put('dryRun', dryRun);

if (batchName &amp;&amp; sources &amp;&amp; sources.length &amp;&amp; inputProperties &amp;&amp; outputProperties) {
    Map&lt;String, String&gt; inputPropertiesMap = new JsonSlurper().parseText(inputProperties);
    Map&lt;String, String&gt; outputPropertiesMap = new JsonSlurper().parseText(outputProperties);
    if (linkMappingPass) {
        outputPropertiesMap.put("onlyLinkMapping", "false");
        outputPropertiesMap.put("saveLinkMapping", "false");
        outputPropertiesMap.put("useLinkMapping", "true");
        outputProperties = new JsonOutput().toJson(outputPropertiesMap);
    }
    createMigrations(batchName, sources, inputPropertiesMap, outputProperties, dryRun);

    LocalDocumentReference batchReference = new LocalDocumentReference(List.of("ConfluenceMigratorPro", "ConfluenceBatches", "Batches"), batchName);
    if (dryRun) {
      xcontext.put('batchPage', "Would create " + batchReference)
    } else {
        Document batchPage = xwiki.getDocument(batchReference)
        Object b = batchPage.getObject("ConfluenceMigratorPro.ConfluenceBatches.Code.ConfluenceBatchClass", true)
        b.set("sources", Arrays.asList(sources));
        b.set("migrations", migrationDocs.stream()
            .map(d -&gt; services.model.serialize(d.getDocumentReference()))
            .collect(Collectors.toList()));
        batchPage.save();
        xcontext.put('batchPage', services.model.serialize(batchReference))
    }
} else {
    xcontext.put('warning', true)
}

{{/groovy}}

{{velocity}}
#macro (renderProperty $propertyNameTranslationKey, $valueDisplay, $overflow)
  &lt;div&gt;
    &lt;span class="cmpBatchCreateTitle"&gt;$escapetool.xml("$services.localization.render($propertyNameTranslationKey)")&lt;/span&gt; #if($overflow) &lt;div class='cmpBatchCreateOverflow'&gt; #end&lt;span&gt;$valueDisplay&lt;/span&gt;#if($overflow)&lt;/div&gt;#end
  &lt;/div&gt;
#end

#macro (prepareSourcesDisplay $sources)
  #set ($sourceDisplayer = "")
  #foreach($source in $sources)
    #set ($sourceDisplayer =$sourceDisplayer + "&lt;span class='cmpBatchCreateBold' &gt;#$foreach.index &lt;/span&gt;
    $escapetool.xml($source)&lt;br/&gt;")
  #end
#end

#macro (renderJson $translationKey, $json, $overflow)
  &lt;div&gt;
    &lt;span class="cmpBatchCreateTitle"&gt;$escapetool.xml("$services.localization.render($translationKey)")&lt;/span&gt;
    #if($overflow)&lt;div class='cmpBatchCreateOverflow'&gt; #end


      {{code}}
      #foreach ($key in $json.keySet())
        $key: $json.get($key)
      #end
      {{/code}}


   #if($overflow)&lt;/div&gt;#end
  &lt;/div&gt;
#end
##
## Render the files that could/are(depending on the dryRun parameter) be created when running the batch.
##
#macro (renderFiles $translationKey, $files, $overflow)
  &lt;div #if($overflow) class='cmpBatchCreateOverflow' #end&gt;
    &lt;span class="cmpBatchCreateTitle"&gt;$escapetool.xml("$services.localization.render($translationKey)")&lt;/span&gt;
    &lt;div #if($overflow) class='cmpBatchCreateOverflow' #end&gt;
      #foreach ($file in $files)
        &lt;span&gt;$services.rendering.escape($file, 'xwiki/2.1') &lt;br/&gt;&lt;/span&gt;
      #end
    &lt;/div&gt;
  &lt;/div&gt;
#end
#set ($discard = $xwiki.ssx.use('ConfluenceMigratorPro.ConfluenceBatches.Create'))

{{html wiki='true'}}
&lt;div&gt;
  #renderProperty('confluencemigratorpro.batches.create.batchName', "$!xcontext.get('batchName')")
  #prepareSourcesDisplay($!xcontext.get('sources'))
  #renderProperty('confluencemigratorpro.batches.create.sources', $sourceDisplayer, true)
  &lt;span&gt;&lt;br/&lt;/span&gt;
  #renderJson('confluencemigratorpro.batches.create.inputProperties', $!xcontext.get('inputProperties'), true)
  #renderJson('confluencemigratorpro.batches.create.outputProperties', $!xcontext.get('outputProperties'), true)
  #renderProperty('confluencemigratorpro.batches.create.linkMappingPass', "$!xcontext.get('linkMappingPass')")
  #renderProperty('confluencemigratorpro.batches.create.dryRun', "$!xcontext.get('dryRun')")
  #if ("$!xcontext.get('dryRun')" == 'true')
    #set ($batchPage  = "$!xcontext.get('batchPage')")
  #else
    #set ($batchPage = "[[$!xcontext.get('batchPage')]]")
  #end
  #renderProperty('confluencemigratorpro.batches.create.batchPage', $batchPage)
  #renderFiles('confluencemigratorpro.batches.create.filesThatCouldBeCreated', $!xcontext.get('pageThatCouldBeCreated') , true)
  #if($!xcontext.get('warning'))
    &lt;br/&gt;
      {{warning}}$escapetool.xml($services.localization.render('confluencemigratorpro.batches.create.warn.missingParameters')){{/warning}}
    &lt;br/&gt;
    [[$escapetool.xml("$services.localization.render('confluencemigratorpro.batches.create.button.title')")&gt;&gt;ConfluenceMigratorPro.ConfluenceBatches.New]]
  #end
&lt;/div&gt;
{{/html}}

{{html}}
&lt;br/&gt;
&lt;form method="post" action="$xwiki.getURL('ConfluenceMigratorPro.ConfluenceBatches.Run')"&gt;
    &lt;input type="hidden" name="name" value="$escapetool.xml($batchName)" /&gt;
    &lt;p&gt;&lt;button class="btn btn-primary" value"=confirm" name="1"&gt;Run the migrations&lt;/button&gt;&lt;/p&gt;
&lt;/form&gt;
{{/html}}

{{/velocity}}
</content>
  <object>
    <name>ConfluenceMigratorPro.ConfluenceBatches.Create</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>f9318c77-4bd1-4a53-90c6-8c3187efd778</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.cmpBatchCreateTitle {
  font-weight: bold;
}

.cmpBatchCreateOverflow {
  max-height: 500px;
  overflow-y: scroll;
}

.cmpBatchCreateBold {
  font-weight: bold;
}
</code>
    </property>
    <property>
      <contentType/>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
</xwikidoc>
