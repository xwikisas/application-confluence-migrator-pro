<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="ConfluenceMigratorPro.ConfluenceBatches.Code.StatsScriptService" locale="">
  <web>ConfluenceMigratorPro.ConfluenceBatches.Code</web>
  <name>StatsScriptService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>ConfluenceMigratorPro.ConfluenceBatches.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <object>
    <name>ConfluenceMigratorPro.ConfluenceBatches.Code.StatsScriptService</name>
    <number>0</number>
    <className>XWiki.ScriptComponentClass</className>
    <guid>7ff6e503-7f7f-4b54-9f18-d45ce6ef76d9</guid>
    <class>
      <name>XWiki.ScriptComponentClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <scope>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>scope</name>
        <number>2</number>
        <prettyName>Scope</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>|wiki|global|user</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </scope>
      <script_content>
        <disabled>0</disabled>
        <editor>Text</editor>
        <name>script_content</name>
        <number>3</number>
        <prettyName>Script</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </script_content>
      <script_language>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>script_language</name>
        <number>1</number>
        <prettyName>Language</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>groovy|python</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </script_language>
    </class>
    <property>
      <scope>wiki</scope>
    </property>
    <property>
      <script_content>import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.xpn.xwiki.XWiki;
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.api.Document;
import com.xpn.xwiki.doc.XWikiAttachment;
import com.xpn.xwiki.doc.XWikiDocument;
import org.slf4j.Logger;
import org.xwiki.component.annotation.Component;
import org.xwiki.job.JobStatusStore;
import org.xwiki.job.event.status.JobProgressManager;
import org.xwiki.job.event.status.JobStatus;
import org.xwiki.component.manager.ComponentManager;
import com.xwiki.confluencepro.ConfluenceMigrationJobRequest;
import org.xwiki.model.EntityType;
import org.xwiki.model.reference.DocumentReference;
import org.xwiki.model.reference.EntityReferenceResolver;
import org.xwiki.rendering.macro.Macro;
import org.xwiki.script.service.ScriptService;

import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Provider;
import javax.inject.Singleton;
import java.util.Collections;
import java.util.Map;
import java.util.List;
import java.util.Date;
import java.util.HashMap

@Component
@Singleton
@Named("ConfluenceMigratorPro.ConfluenceBatches.stats")
public class BatchStatsScriptService implements ScriptService
{
    private static final TypeReference&lt;Map&lt;String, Object&gt;&gt; MAP_TYPE_REF = new TypeReference&lt;Map&lt;String, Object&gt;&gt;() {};
    private static final TypeReference&lt;Map&lt;String, Integer&gt;&gt; MAPCOUNT_TYPE_REF = new TypeReference&lt;Map&lt;String, Integer&gt;&gt;() {};
    private static final String DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
    private static final TypeReference&lt;Map&lt;String, List&lt;Map&lt;String, Object&gt;&gt;&gt;&gt; REF_WARNING_TYPE_REF = new TypeReference&lt;Map&lt;String, List&lt;Map&lt;String, Object&gt;&gt;&gt;&gt;() { };
    private static final TypeReference&lt;Map&lt;String, List&lt;Object&gt;&gt;&gt; CRITICAL_TYPE_REF = new TypeReference&lt;Map&lt;String, List&lt;Object&gt;&gt;&gt;() { };
    private static final TypeReference&lt;Map&lt;String, Map&lt;String, Integer&gt;&gt;&gt; MACROPAGE_TYPE_REF = new TypeReference&lt;Map&lt;String, Map&lt;String, Integer&gt;&gt;&gt;() { };

    @Inject
    private JobStatusStore jobStatusStore;

    @Inject
    private Provider&lt;XWikiContext&gt; contextProvider;

    @Inject
    private Provider&lt;ComponentManager&gt; componentManagerProvider;

    @Inject
    private Logger logger;

    @Inject
    private JobProgressManager progressManager;

    @Inject
    private EntityReferenceResolver&lt;String&gt; resolver;

    public String getCSV(Document batchDoc)
    {
        List&lt;String&gt; migrations = (List&lt;String&gt;) batchDoc.getValue("migrations");
        String csv = (
                "migration," +
                "source," +
                "spaces," +
                "start," +
                "end," +
                "duration_ms," +
                "docCount," +
                "revisionCount," +
                "duration_per_doc," +
                "duration_per_revision," +
                "unhandled_macros," +
                "unhandled_macros_distincts," +
                "reference_issues," +
                "critical_issues," +
                "executed," +
                "requires_extra_attention\n"
        );

        int migrationCount = 0;
        progressManager.pushLevelProgress(migrations.size(), this);
        for (String migration : migrations) {
            progressManager.startStep(this);
            migrationCount++;
            logger.info("Computing time for migration [{}] ({}/{})", migration, migrationCount, migrations.size());
            csv += getCSVLine(migration);
            progressManager.endStep(this);
        }
        progressManager.popLevelProgress(this);

        return csv;
    }

    public void computeAndSaveTimeAnalysis(Document batchDoc)
    {
        logger.info("Computing the CSV");
        String csv = getCSV(batchDoc);
        logger.info("Saving the CSV in time.csv");
        batchDoc.addAttachment("time.csv", csv.getBytes());
        batchDoc.save("Add time.csv");
        logger.info("Done");
    }

    private Map&lt;String, Integer&gt; getMacrosJSON(XWikiDocument doc)
    {
        String macros = doc.getStringValue("macros");
        def macrosJSON = null;
        if (macros.startsWith('{')) {
            macrosJSON = new ObjectMapper().readValue(macros, MAPCOUNT_TYPE_REF);
            if (macrosJSON == null) {
                logger.info("Macro counts are not available");
            }
        }
        return macrosJSON;
    }

    private String getCSVLine(String migration)
    {
        XWikiContext xcontext = contextProvider.get();
        XWiki wiki = xcontext.getWiki();

        DocumentReference migrationDoc = new DocumentReference(resolver.resolve(migration, EntityType.DOCUMENT));
        String startDateString = "-";
        String endDateString = "-";
        long durationMs = 0;

        JobStatus jobStatus = jobStatusStore.getJobStatus(ConfluenceMigrationJobRequest.getJobId(migrationDoc));
        if (jobStatus != null) {
          Date start = jobStatus.getStartDate();
          Date end = jobStatus.getEndDate();
          durationMs = end.getTime() - start.getTime();
          startDateString = wiki.formatDate(start, DATE_FORMAT, xcontext);
          endDateString = wiki.formatDate(end, DATE_FORMAT, xcontext);
        }

        XWikiDocument doc = wiki.getDocument(migrationDoc, xcontext);
        List&lt;String&gt; spaces = doc != null ? doc.getListValue("spaces") : Collections.EMPTY_LIST;
        boolean executed = doc != null ? doc.getIntValue("executed") == 1 : false;
        long imported = doc != null ? doc.getLongValue("imported") : 0;
        long revisions = doc != null ? doc.getLongValue("revisions") : 0;

        String source = getSource(doc);

        long referenceIssues = countReferenceIssues(doc);
        def (long criticalIssues, boolean extraBad) = countCriticalIssues(doc);

        extraBad = extraBad || (imported == 0);

        int unhandledMacros = -1;
        int unhandledMacrosDistinct = -1;
        def macrosJSON = getMacrosJSON(doc);
        if (macrosJSON != null) {
            unhandledMacros = 0;
            unhandledMacrosDistinct = 0;
            for (Map.Entry&lt;String, Integer&gt; macro : macrosJSON.entrySet()) {
                String macroName = macro.getKey();
                Integer count = macro.getValue();
                if (!componentManagerProvider.get().hasComponent(Macro.class, macroName)) {
                    unhandledMacrosDistinct += 1;
                    unhandledMacros += count;
                }
            }
        }

        return (
            migration + ',' +
            source + ',' +
            String.join("|", spaces) + ',' +
            startDateString + ',' +
            endDateString + ',' +
            s(durationMs) + ',' +
            s(imported) + ',' +
            s(revisions) + ',' +
            s(Math.round(durationMs / Math.max(1, imported))) + ',' +
            s(Math.round(durationMs / Math.max(1, revisions))) + ',' +
            s(unhandledMacros) + ',' +
            s(unhandledMacrosDistinct) + ',' +
            s(referenceIssues) + ',' +
            s(criticalIssues) + ',' +
            s(executed) + ',' +
            s(extraBad) + '\n'
        );
    }

    private String getSource(XWikiDocument doc)
    {
        try {
            Map inputProperties = new ObjectMapper()
                    .readValue(doc.getStringValue("inputProperties"), MAP_TYPE_REF);
            return (String) inputProperties.getOrDefault("source", "");
        } catch (Exception e) {
            logger.error("Failed to get the source from input properties, this data will be missing", e);
        }
    }

    private long countReferenceIssues(XWikiDocument doc)
    {
        long referenceIssues = 0;
        def attachmentWarnings = getJSON(doc, "confluenceRefWarnings.json", REF_WARNING_TYPE_REF);
        if (attachmentWarnings == null) {
            return -1;
        }
        for (def warningList : attachmentWarnings.values()) {
            for (def entry : warningList) {
                def originalVersion = entry.get("originalVersion");
                if (originalVersion == null || originalVersion.equals(entry.get("pageId"))) {
                    referenceIssues++;
                }
            }
        }
        return referenceIssues;
    }

    private def countCriticalIssues(XWikiDocument doc)
    {
        long criticalIssues = 0;
        boolean extraBad = false;
        def issues = getJSON(doc, "skipped.json", CRITICAL_TYPE_REF);
        if (issues == null) {
            return [-1, true];
        }
        for (def issueList : issues.values()) {
            if (!issueList.isEmpty()) {
                if (issueList.get(0) instanceof String) {
                    // old report
                    criticalIssues += issueList.size();
                    extraBad = extraBad || issueList.contains("Exception thrown during job execution");
                } else {
                    for (def entry : issueList) {
                        def originalVersion = entry.get("originalVersion");
                        if (originalVersion == null || originalVersion.equals(entry.get("pageId"))) {
                            criticalIssues++;
                        }
                        def data = entry.get("data");
                        extraBad = extraBad || "Exception thrown during job execution".equals(data.get("msg"));
                    }
                }
            }
        }
        return [criticalIssues, extraBad];
    }

    private Map&lt;String, List&lt;Object&gt;&gt; getJSON(XWikiDocument doc, String filename, TypeReference&lt;?&gt; typeRef)
    {
        XWikiAttachment a = doc.getAttachment(filename);
        if (a == null) {
            return null;
        }

        try {
            return new ObjectMapper().readValue(a.getAttachmentContent(contextProvider.get()).getContentInputStream(), typeRef);
        } catch (Exception e) {
            logger.error("Failed to parse [{}], related numbers will probably be inaccurate", e);
        }
        return null;
    }

    private static String s(Object o)
    {
        return o.toString();
    }

    private final class UnhandledMacroInfo
    {
        public int count;
        public int pages;
        public final Collection&lt;String&gt; migrations;

        private UnhandledMacroInfo()
        {
            this.count = 0;
            this.pages = 0;
            this.migrations = new HashSet&lt;&gt;();
        }
    }

    private final class UnhandledParameterInfo
    {
        public int count;
        public final Collection&lt;String&gt; migrations;

        private UnhandledParameterInfo()
        {
            this.count = 0;
            this.migrations = new HashSet&lt;&gt;();
        }
    }

    private final class UnhandledParameters
    {
        private final Map&lt;String, Map&lt;String, Collection&lt;String&gt;&gt;&gt; ignoredMap;

        public long total;
        public final String ignored;
        public Map&lt;String, Map&lt;String, UnhandledParameterInfo&gt;&gt; parameterNames;
        public Map&lt;String, Map&lt;String, Map&lt;String, UnhandledParameterInfo&gt;&gt;&gt; parameterValues;

        public UnhandledParameters(String ignored)
        {
            this.ignored = ignored;
            this.ignoredMap = parse(ignored);
            this.parameterNames = new HashMap&lt;&gt;();
            this.parameterValues = new HashMap&lt;&gt;();
        }

        private Map&lt;String, Map&lt;String, Collection&lt;String&gt;&gt;&gt; parse(String ignored) {
            Map&lt;String, Map&lt;String, Collection&lt;String&gt;&gt;&gt; r = new HashMap&lt;&gt;();
            for (String element : ignored.split("\\|")) {
                if (element.isEmpty()) {
                    continue;
                }
                String[] macroParam = element.split(":");
                Map&lt;String, UnhandledParameterInfo&gt; macroInfo = r.get(macroParam[0]);
                boolean alreadyIgnoreAnythingAboutThisMacro = r.containsKey(macroParam[0]) &amp;&amp; macroInfo == null;
                if (!alreadyIgnoreAnythingAboutThisMacro) {
                    if (macroParam.length == 1) {
                        // ignore anything about this macro
                        r.put(element, null);
                    } else {
                        String[] pv = macroParam[1].split('=');
                        if (macroInfo == null) {
                            macroInfo = new HashMap&lt;&gt;();
                            r.put(macroParam[0], macroInfo);
                        }
                        Collection&lt;String&gt; paramInfo = macroInfo.get(pv[0]);
                        boolean alreadyIgnoreAnythingAboutThisParam = macroInfo.containsKey(pv[0]) &amp;&amp; paramInfo == null;
                        if (!alreadyIgnoreAnythingAboutThisParam) {
                            if (pv.length == 1) {
                                // ignore anything about this parameter
                                macroInfo.put(pv[0], null);
                            } else {
                                if (paramInfo == null) {
                                    paramInfo = new HashSet&lt;&gt;();
                                    macroInfo.put(pv[0], paramInfo);
                                }
                                paramInfo.add(pv[1]);
                            }
                        }
                    }
                }
            }
            return r;
        }

        private void addUnhandledValue(String migration, String macroName, String paramName, String value)
        {
            if (isIgnoredValue(macroName, paramName, value)) {
                return;
            }
            def paramNames = parameterValues.computeIfAbsent(macroName, k -&gt; new HashMap&lt;&gt;());
            def paramValues = paramNames.computeIfAbsent(paramName, k -&gt; new HashMap&lt;&gt;());
            def valueInfo = paramValues.computeIfAbsent(value, k -&gt; new UnhandledParameterInfo());
            valueInfo.count++;
            valueInfo.migrations.add(migration);
            total++;
        }

        private void addUnhandledParameter(String migration, String macroName, String paramName, String value)
        {
            if (isIgnoredValue(macroName, paramName, value)) {
                return;
            }
            def paramNames = parameterNames.computeIfAbsent(macroName, k -&gt; new HashMap&lt;&gt;());
            def paramInfo = paramNames.computeIfAbsent(paramName, k -&gt; new UnhandledParameterInfo());
            paramInfo.count++;
            paramInfo.migrations.add(migration);
            total++;
        }

        private boolean isIgnoredValue(String macroName, String paramName, String value)
        {
            Map&lt;String, Collection&lt;String&gt;&gt; macroInfo = ignoredMap.get(macroName);
            if (macroInfo == null) {
                if (ignoredMap.containsKey(macroName)) {
                    // this macro is ignored
                    return true;
                }
            } else {
                Collection&lt;String&gt; paramInfo = macroInfo.get(paramName);
                if (paramInfo == null) {
                    if (macroInfo.containsKey(paramName)) {
                        // This parameter is ignored
                        return true;
                    }
                } else if (paramInfo.contains(value)) {
                    // This parameter value is ignored
                    return true;
                }
            }

            return false;
        }
    }

    private void addUnhandledParameters(UnhandledParameters unhandledParameters, String migration)
    {
        addUnhandledParameters(unhandledParameters, migration, false);
        addUnhandledParameters(unhandledParameters, migration, true);
    }

    private void addUnhandledParameters(UnhandledParameters unhandledParameters, String migration, boolean unhandledValues)
    {
        DocumentReference migrationDoc = new DocumentReference(resolver.resolve(migration, EntityType.DOCUMENT));
        XWikiContext xcontext = contextProvider.get();
        XWikiDocument doc = xcontext.getWiki().getDocument(migrationDoc, xcontext);
        String filename = unhandledValues ? "unhandledParameterValues.json" : "unhandledParameters.json";
        def unhandledParametersJSON = getJSON(doc, filename, REF_WARNING_TYPE_REF);
        if (unhandledParametersJSON != null) {
            for (def parameterValuesEntry : unhandledParametersJSON.entrySet()) {
                String docName = parameterValuesEntry.getKey();
                for (def entry : parameterValuesEntry.getValue()) {
                    def originalVersion = entry.get("originalVersion");
                    if (originalVersion == null || originalVersion.equals(entry.get("pageId"))) {
                        def data = entry.get("data");
                        if (data != null) {
                            def args = data.get("args");
                            if (args != null &amp;&amp; args.size() == 3) {
                                String macroName = args.get(2);
                                if (unhandledValues) {
                                    String value = args.get(0);
                                    String paramName = args.get(1);
                                    unhandledParameters.addUnhandledValue(migration, macroName, paramName, value);
                                } else {
                                    String paramName = args.get(0);
                                    String value = args.get(1);
                                    unhandledParameters.addUnhandledParameter(migration, macroName, paramName, value);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    private void addUnhandledMacros(Map&lt;String, UnhandledMacroInfo&gt; unhandledMacros, String migration)
    {
        DocumentReference migrationDoc = new DocumentReference(resolver.resolve(migration, EntityType.DOCUMENT));
        XWikiContext xcontext = contextProvider.get();
        XWikiDocument doc = xcontext.getWiki().getDocument(migrationDoc, xcontext);
        def macroPagesJSON = getJSON(doc, "macroPages.json", MACROPAGE_TYPE_REF);
        if (macroPagesJSON != null) {
            for (Map&lt;String, Integer&gt; entries : macroPagesJSON.values()) {
                for (Map.Entry&lt;String, Integer&gt; entry : entries.entrySet()) {
                    String macroName = entry.getKey();
                    if (!componentManagerProvider.get().hasComponent(Macro.class, macroName)) {
                        def info = unhandledMacros.computeIfAbsent(macroName, k -&gt; new UnhandledMacroInfo());
                        info.pages += 1;
                        info.migrations.add(migration);
                        info.count += entry.getValue();
                        unhandledMacros.put(macroName, info);
                    }
                }
            }
        }
    }

    public String computeUnhandledParameters(Document batchDoc, String ignored)
    {
        List&lt;String&gt; migrations = (List&lt;String&gt;) batchDoc.getValue("migrations");
        progressManager.pushLevelProgress(migrations.size(), this);
        UnhandledParameters unhandledParameters = new UnhandledParameters(ignored);
        int migrationCount = 0;
        for (String migration : migrations) {
            progressManager.startStep(this);
            migrationCount++;
            logger.info("Getting unhandled parameters for migration [{}] ({}/{})", migration, migrationCount, migrations.size());
            addUnhandledParameters(unhandledParameters, migration);
            progressManager.endStep(this);
        }
        progressManager.popLevelProgress(this);
        return new ObjectMapper().writeValueAsString(unhandledParameters);
    }

    public void computeAndSaveUnhandledParameters(Document batchDoc, String ignored)
    {
        progressManager.pushLevelProgress(2, this);
        logger.info("Aggregating the unhandled parameters");
        String json = computeUnhandledParameters(batchDoc, ignored);
        logger.info("Saving the JSON in unhandledParameters.json");
        batchDoc.addAttachment("unhandledParameters.json", json.getBytes());
        logger.info("Aggregating the unhandled macros");
        json = computeUnhandledMacros(batchDoc);
        logger.info("Saving the JSON in unhandledMacros.json");
        batchDoc.addAttachment("unhandledMacros.json", json.getBytes());
        batchDoc.save("Add unhandledMacros.json and unhandledParameters.json");
        progressManager.popLevelProgress(this);
        logger.info("Done");
    }

    public String computeUnhandledMacros(Document batchDoc)
    {
        List&lt;String&gt; migrations = (List&lt;String&gt;) batchDoc.getValue("migrations");
        progressManager.pushLevelProgress(migrations.size(), this);
        Map&lt;String, UnhandledMacroInfo&gt; unhandledMacros = new HashMap&lt;&gt;();
        int migrationCount = 0;
        for (String migration : migrations) {
            progressManager.startStep(this);
            migrationCount++;
            logger.info("Getting unhandled macros for migration [{}] ({}/{})", migration, migrationCount, migrations.size());
            addUnhandledMacros(unhandledMacros, migration);
            progressManager.endStep(this);
        }
        progressManager.popLevelProgress(this);
        return new ObjectMapper().writeValueAsString(unhandledMacros);
    }
}</script_content>
    </property>
    <property>
      <script_language>groovy</script_language>
    </property>
  </object>
</xwikidoc>
